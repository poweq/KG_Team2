
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000348c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003614  08003614  00004614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800362c  0800362c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  0800362c  0800362c  0000462c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003634  08003634  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003634  08003634  00004634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003638  08003638  00004638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800363c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000000c8  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000d4  200000d4  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d327  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d75  00000000  00000000  00012363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc8  00000000  00000000  000140d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a10  00000000  00000000  00014da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000204e1  00000000  00000000  000157b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e885  00000000  00000000  00035c91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7d25  00000000  00000000  00044516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010c23b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003608  00000000  00000000  0010c280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0010f888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080035fc 	.word	0x080035fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080035fc 	.word	0x080035fc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <Generate_Random_Number>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t Generate_Random_Number(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
    uint32_t random32bit = 0;
 80004be:	2300      	movs	r3, #0
 80004c0:	607b      	str	r3, [r7, #4]

    if (HAL_RNG_GenerateRandomNumber(&hrng, &random32bit) == HAL_OK)
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	4619      	mov	r1, r3
 80004c6:	4807      	ldr	r0, [pc, #28]	@ (80004e4 <Generate_Random_Number+0x2c>)
 80004c8:	f001 fbf6 	bl	8001cb8 <HAL_RNG_GenerateRandomNumber>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d102      	bne.n	80004d8 <Generate_Random_Number+0x20>
    {
        // Convert to 0~255 range
        return (uint8_t)(random32bit % 256);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	e000      	b.n	80004da <Generate_Random_Number+0x22>
    }
    else
    {

        // Handle RNG error
        return 0;
 80004d8:	2300      	movs	r3, #0
    }
}
 80004da:	4618      	mov	r0, r3
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	20000030 	.word	0x20000030

080004e8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a19      	ldr	r2, [pc, #100]	@ (800055c <HAL_UART_RxCpltCallback+0x74>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d12b      	bne.n	8000552 <HAL_UART_RxCpltCallback+0x6a>
        uint8_t rx_data;
        HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 80004fa:	f107 030f 	add.w	r3, r7, #15
 80004fe:	2201      	movs	r2, #1
 8000500:	4619      	mov	r1, r3
 8000502:	4817      	ldr	r0, [pc, #92]	@ (8000560 <HAL_UART_RxCpltCallback+0x78>)
 8000504:	f002 f92a 	bl	800275c <HAL_UART_Receive_IT>
        if (rx_data == 'a') {
 8000508:	7bfb      	ldrb	r3, [r7, #15]
 800050a:	2b61      	cmp	r3, #97	@ 0x61
 800050c:	d10f      	bne.n	800052e <HAL_UART_RxCpltCallback+0x46>
            HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800050e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000512:	4814      	ldr	r0, [pc, #80]	@ (8000564 <HAL_UART_RxCpltCallback+0x7c>)
 8000514:	f000 ff33 	bl	800137e <HAL_GPIO_TogglePin>
            key_led=! key_led;
 8000518:	4b13      	ldr	r3, [pc, #76]	@ (8000568 <HAL_UART_RxCpltCallback+0x80>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b00      	cmp	r3, #0
 800051e:	bf0c      	ite	eq
 8000520:	2301      	moveq	r3, #1
 8000522:	2300      	movne	r3, #0
 8000524:	b2db      	uxtb	r3, r3
 8000526:	461a      	mov	r2, r3
 8000528:	4b0f      	ldr	r3, [pc, #60]	@ (8000568 <HAL_UART_RxCpltCallback+0x80>)
 800052a:	701a      	strb	r2, [r3, #0]
        else if (rx_data == 'A') {
            HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
            key_led=! key_led;
        }
    }
}
 800052c:	e011      	b.n	8000552 <HAL_UART_RxCpltCallback+0x6a>
        else if (rx_data == 'A') {
 800052e:	7bfb      	ldrb	r3, [r7, #15]
 8000530:	2b41      	cmp	r3, #65	@ 0x41
 8000532:	d10e      	bne.n	8000552 <HAL_UART_RxCpltCallback+0x6a>
            HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000534:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000538:	480a      	ldr	r0, [pc, #40]	@ (8000564 <HAL_UART_RxCpltCallback+0x7c>)
 800053a:	f000 ff20 	bl	800137e <HAL_GPIO_TogglePin>
            key_led=! key_led;
 800053e:	4b0a      	ldr	r3, [pc, #40]	@ (8000568 <HAL_UART_RxCpltCallback+0x80>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	bf0c      	ite	eq
 8000546:	2301      	moveq	r3, #1
 8000548:	2300      	movne	r3, #0
 800054a:	b2db      	uxtb	r3, r3
 800054c:	461a      	mov	r2, r3
 800054e:	4b06      	ldr	r3, [pc, #24]	@ (8000568 <HAL_UART_RxCpltCallback+0x80>)
 8000550:	701a      	strb	r2, [r3, #0]
}
 8000552:	bf00      	nop
 8000554:	3710      	adds	r7, #16
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40004400 	.word	0x40004400
 8000560:	20000088 	.word	0x20000088
 8000564:	40020c00 	.word	0x40020c00
 8000568:	2000002d 	.word	0x2000002d

0800056c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4) {
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a0a      	ldr	r2, [pc, #40]	@ (80005a4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d10e      	bne.n	800059c <HAL_TIM_PeriodElapsedCallback+0x30>
    	encorder0++;
 800057e:	4b0a      	ldr	r3, [pc, #40]	@ (80005a8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000580:	881b      	ldrh	r3, [r3, #0]
 8000582:	3301      	adds	r3, #1
 8000584:	b29a      	uxth	r2, r3
 8000586:	4b08      	ldr	r3, [pc, #32]	@ (80005a8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000588:	801a      	strh	r2, [r3, #0]
    	encorder1 = Generate_Random_Number();
 800058a:	f7ff ff95 	bl	80004b8 <Generate_Random_Number>
 800058e:	4603      	mov	r3, r0
 8000590:	461a      	mov	r2, r3
 8000592:	4b06      	ldr	r3, [pc, #24]	@ (80005ac <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000594:	801a      	strh	r2, [r3, #0]
      tim4_flag=1;
 8000596:	4b06      	ldr	r3, [pc, #24]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
    }

}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40000800 	.word	0x40000800
 80005a8:	20000028 	.word	0x20000028
 80005ac:	2000002a 	.word	0x2000002a
 80005b0:	2000002c 	.word	0x2000002c

080005b4 <random_led>:
uint8_t random_led()
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0

	uint8_t random_led;
	random_led = encorder1%2;
 80005ba:	4b0d      	ldr	r3, [pc, #52]	@ (80005f0 <random_led+0x3c>)
 80005bc:	881b      	ldrh	r3, [r3, #0]
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	f003 0301 	and.w	r3, r3, #1
 80005c4:	71fb      	strb	r3, [r7, #7]

	switch(random_led){
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d002      	beq.n	80005d2 <random_led+0x1e>
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d005      	beq.n	80005dc <random_led+0x28>
 80005d0:	e009      	b.n	80005e6 <random_led+0x32>
		case 0:
			  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80005d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005d6:	4807      	ldr	r0, [pc, #28]	@ (80005f4 <random_led+0x40>)
 80005d8:	f000 fed1 	bl	800137e <HAL_GPIO_TogglePin>

		case 1:
			  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80005dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005e0:	4804      	ldr	r0, [pc, #16]	@ (80005f4 <random_led+0x40>)
 80005e2:	f000 fecc 	bl	800137e <HAL_GPIO_TogglePin>

	}

	return random_led;
 80005e6:	79fb      	ldrb	r3, [r7, #7]

}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	2000002a 	.word	0x2000002a
 80005f4:	40020c00 	.word	0x40020c00

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint8_t buffer_array[10]={0};
 80005fe:	2300      	movs	r3, #0
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	f107 0308 	add.w	r3, r7, #8
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	809a      	strh	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f000 faec 	bl	8000be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f85c 	bl	80006cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 f94e 	bl	80008b4 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000618:	f000 f8d4 	bl	80007c4 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 800061c:	f000 f920 	bl	8000860 <MX_USART2_UART_Init>
  MX_RNG_Init();
 8000620:	f000 f8bc 	bl	800079c <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim4);
 8000624:	4822      	ldr	r0, [pc, #136]	@ (80006b0 <main+0xb8>)
 8000626:	f001 fbed 	bl	8001e04 <HAL_TIM_Base_Start_IT>
  HAL_UART_Transmit_IT(&huart2, buffer_array,1);
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	2201      	movs	r2, #1
 800062e:	4619      	mov	r1, r3
 8000630:	4820      	ldr	r0, [pc, #128]	@ (80006b4 <main+0xbc>)
 8000632:	f002 f85d 	bl	80026f0 <HAL_UART_Transmit_IT>
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8000636:	1cfb      	adds	r3, r7, #3
 8000638:	2201      	movs	r2, #1
 800063a:	4619      	mov	r1, r3
 800063c:	481d      	ldr	r0, [pc, #116]	@ (80006b4 <main+0xbc>)
 800063e:	f002 f88d 	bl	800275c <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(tim4_flag==1)
 8000642:	4b1d      	ldr	r3, [pc, #116]	@ (80006b8 <main+0xc0>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d1fb      	bne.n	8000642 <main+0x4a>
	  {
		  random_led();
 800064a:	f7ff ffb3 	bl	80005b4 <random_led>
		  //0 : PD12   1: PD13  2: PD14 3: PD15

		  //flag init
		  tim4_flag=0;
 800064e:	4b1a      	ldr	r3, [pc, #104]	@ (80006b8 <main+0xc0>)
 8000650:	2200      	movs	r2, #0
 8000652:	701a      	strb	r2, [r3, #0]
		  buffer_array[0] = 0xf5; //1111 0101 check sum
 8000654:	23f5      	movs	r3, #245	@ 0xf5
 8000656:	713b      	strb	r3, [r7, #4]
		  buffer_array[1] = 8; //length
 8000658:	2308      	movs	r3, #8
 800065a:	717b      	strb	r3, [r7, #5]
		  // encorder data
		  buffer_array[2]= (encorder0>>24) &0xff;
 800065c:	2300      	movs	r3, #0
 800065e:	71bb      	strb	r3, [r7, #6]
		  buffer_array[3]= (encorder0>>16)&0xff;//
 8000660:	2300      	movs	r3, #0
 8000662:	71fb      	strb	r3, [r7, #7]
		  buffer_array[4]= (encorder0>>8)&0xff;
 8000664:	4b15      	ldr	r3, [pc, #84]	@ (80006bc <main+0xc4>)
 8000666:	881b      	ldrh	r3, [r3, #0]
 8000668:	0a1b      	lsrs	r3, r3, #8
 800066a:	b29b      	uxth	r3, r3
 800066c:	b2db      	uxtb	r3, r3
 800066e:	723b      	strb	r3, [r7, #8]
		  buffer_array[5]= (encorder0)&0xff;//
 8000670:	4b12      	ldr	r3, [pc, #72]	@ (80006bc <main+0xc4>)
 8000672:	881b      	ldrh	r3, [r3, #0]
 8000674:	b2db      	uxtb	r3, r3
 8000676:	727b      	strb	r3, [r7, #9]

		  buffer_array[6]= key_led&0xff;// led on value
 8000678:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <main+0xc8>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	72bb      	strb	r3, [r7, #10]
		  buffer_array[7]= (encorder1>>16)&0xff;//
 800067e:	2300      	movs	r3, #0
 8000680:	72fb      	strb	r3, [r7, #11]
		  buffer_array[8]= (encorder1>>8)&0xff;
 8000682:	4b10      	ldr	r3, [pc, #64]	@ (80006c4 <main+0xcc>)
 8000684:	881b      	ldrh	r3, [r3, #0]
 8000686:	0a1b      	lsrs	r3, r3, #8
 8000688:	b29b      	uxth	r3, r3
 800068a:	b2db      	uxtb	r3, r3
 800068c:	733b      	strb	r3, [r7, #12]
		  buffer_array[9]= (encorder1)&0xff;//
 800068e:	4b0d      	ldr	r3, [pc, #52]	@ (80006c4 <main+0xcc>)
 8000690:	881b      	ldrh	r3, [r3, #0]
 8000692:	b2db      	uxtb	r3, r3
 8000694:	737b      	strb	r3, [r7, #13]

		  HAL_UART_Transmit_IT(&huart2,(uint8_t*) buffer_array,10);
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	220a      	movs	r2, #10
 800069a:	4619      	mov	r1, r3
 800069c:	4805      	ldr	r0, [pc, #20]	@ (80006b4 <main+0xbc>)
 800069e:	f002 f827 	bl	80026f0 <HAL_UART_Transmit_IT>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80006a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006a6:	4808      	ldr	r0, [pc, #32]	@ (80006c8 <main+0xd0>)
 80006a8:	f000 fe69 	bl	800137e <HAL_GPIO_TogglePin>
	  if(tim4_flag==1)
 80006ac:	e7c9      	b.n	8000642 <main+0x4a>
 80006ae:	bf00      	nop
 80006b0:	20000040 	.word	0x20000040
 80006b4:	20000088 	.word	0x20000088
 80006b8:	2000002c 	.word	0x2000002c
 80006bc:	20000028 	.word	0x20000028
 80006c0:	2000002d 	.word	0x2000002d
 80006c4:	2000002a 	.word	0x2000002a
 80006c8:	40020c00 	.word	0x40020c00

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b094      	sub	sp, #80	@ 0x50
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 0320 	add.w	r3, r7, #32
 80006d6:	2230      	movs	r2, #48	@ 0x30
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f002 ff62 	bl	80035a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	4b27      	ldr	r3, [pc, #156]	@ (8000794 <SystemClock_Config+0xc8>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f8:	4a26      	ldr	r2, [pc, #152]	@ (8000794 <SystemClock_Config+0xc8>)
 80006fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000700:	4b24      	ldr	r3, [pc, #144]	@ (8000794 <SystemClock_Config+0xc8>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000704:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070c:	2300      	movs	r3, #0
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	4b21      	ldr	r3, [pc, #132]	@ (8000798 <SystemClock_Config+0xcc>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a20      	ldr	r2, [pc, #128]	@ (8000798 <SystemClock_Config+0xcc>)
 8000716:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b1e      	ldr	r3, [pc, #120]	@ (8000798 <SystemClock_Config+0xcc>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000728:	2302      	movs	r3, #2
 800072a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072c:	2301      	movs	r3, #1
 800072e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000730:	2310      	movs	r3, #16
 8000732:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000734:	2302      	movs	r3, #2
 8000736:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000738:	2300      	movs	r3, #0
 800073a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800073c:	2310      	movs	r3, #16
 800073e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000740:	23c0      	movs	r3, #192	@ 0xc0
 8000742:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000744:	2302      	movs	r3, #2
 8000746:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000748:	2304      	movs	r3, #4
 800074a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074c:	f107 0320 	add.w	r3, r7, #32
 8000750:	4618      	mov	r0, r3
 8000752:	f000 fe2f 	bl	80013b4 <HAL_RCC_OscConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800075c:	f000 f8fc 	bl	8000958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000760:	230f      	movs	r3, #15
 8000762:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000764:	2300      	movs	r3, #0
 8000766:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f001 f892 	bl	80018a4 <HAL_RCC_ClockConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000786:	f000 f8e7 	bl	8000958 <Error_Handler>
  }
}
 800078a:	bf00      	nop
 800078c:	3750      	adds	r7, #80	@ 0x50
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800
 8000798:	40007000 	.word	0x40007000

0800079c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <MX_RNG_Init+0x20>)
 80007a2:	4a07      	ldr	r2, [pc, #28]	@ (80007c0 <MX_RNG_Init+0x24>)
 80007a4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	@ (80007bc <MX_RNG_Init+0x20>)
 80007a8:	f001 fa5c 	bl	8001c64 <HAL_RNG_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80007b2:	f000 f8d1 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000030 	.word	0x20000030
 80007c0:	50060800 	.word	0x50060800

080007c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ca:	f107 0308 	add.w	r3, r7, #8
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d8:	463b      	mov	r3, r7
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80007e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000858 <MX_TIM4_Init+0x94>)
 80007e2:	4a1e      	ldr	r2, [pc, #120]	@ (800085c <MX_TIM4_Init+0x98>)
 80007e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16000;
 80007e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000858 <MX_TIM4_Init+0x94>)
 80007e8:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80007ec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000858 <MX_TIM4_Init+0x94>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500;
 80007f4:	4b18      	ldr	r3, [pc, #96]	@ (8000858 <MX_TIM4_Init+0x94>)
 80007f6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80007fa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fc:	4b16      	ldr	r3, [pc, #88]	@ (8000858 <MX_TIM4_Init+0x94>)
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000802:	4b15      	ldr	r3, [pc, #84]	@ (8000858 <MX_TIM4_Init+0x94>)
 8000804:	2280      	movs	r2, #128	@ 0x80
 8000806:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000808:	4813      	ldr	r0, [pc, #76]	@ (8000858 <MX_TIM4_Init+0x94>)
 800080a:	f001 faab 	bl	8001d64 <HAL_TIM_Base_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000814:	f000 f8a0 	bl	8000958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000818:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800081c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800081e:	f107 0308 	add.w	r3, r7, #8
 8000822:	4619      	mov	r1, r3
 8000824:	480c      	ldr	r0, [pc, #48]	@ (8000858 <MX_TIM4_Init+0x94>)
 8000826:	f001 fc4d 	bl	80020c4 <HAL_TIM_ConfigClockSource>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000830:	f000 f892 	bl	8000958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000834:	2300      	movs	r3, #0
 8000836:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000838:	2300      	movs	r3, #0
 800083a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800083c:	463b      	mov	r3, r7
 800083e:	4619      	mov	r1, r3
 8000840:	4805      	ldr	r0, [pc, #20]	@ (8000858 <MX_TIM4_Init+0x94>)
 8000842:	f001 fe75 	bl	8002530 <HAL_TIMEx_MasterConfigSynchronization>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800084c:	f000 f884 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	3718      	adds	r7, #24
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000040 	.word	0x20000040
 800085c:	40000800 	.word	0x40000800

08000860 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000864:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <MX_USART2_UART_Init+0x4c>)
 8000866:	4a12      	ldr	r2, [pc, #72]	@ (80008b0 <MX_USART2_UART_Init+0x50>)
 8000868:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800086a:	4b10      	ldr	r3, [pc, #64]	@ (80008ac <MX_USART2_UART_Init+0x4c>)
 800086c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000870:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000872:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <MX_USART2_UART_Init+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000878:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <MX_USART2_UART_Init+0x4c>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800087e:	4b0b      	ldr	r3, [pc, #44]	@ (80008ac <MX_USART2_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000884:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <MX_USART2_UART_Init+0x4c>)
 8000886:	220c      	movs	r2, #12
 8000888:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088a:	4b08      	ldr	r3, [pc, #32]	@ (80008ac <MX_USART2_UART_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000890:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <MX_USART2_UART_Init+0x4c>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000896:	4805      	ldr	r0, [pc, #20]	@ (80008ac <MX_USART2_UART_Init+0x4c>)
 8000898:	f001 feda 	bl	8002650 <HAL_UART_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008a2:	f000 f859 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000088 	.word	0x20000088
 80008b0:	40004400 	.word	0x40004400

080008b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	4b20      	ldr	r3, [pc, #128]	@ (8000950 <MX_GPIO_Init+0x9c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a1f      	ldr	r2, [pc, #124]	@ (8000950 <MX_GPIO_Init+0x9c>)
 80008d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b1d      	ldr	r3, [pc, #116]	@ (8000950 <MX_GPIO_Init+0x9c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	4b19      	ldr	r3, [pc, #100]	@ (8000950 <MX_GPIO_Init+0x9c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	4a18      	ldr	r2, [pc, #96]	@ (8000950 <MX_GPIO_Init+0x9c>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f6:	4b16      	ldr	r3, [pc, #88]	@ (8000950 <MX_GPIO_Init+0x9c>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	4b12      	ldr	r3, [pc, #72]	@ (8000950 <MX_GPIO_Init+0x9c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	4a11      	ldr	r2, [pc, #68]	@ (8000950 <MX_GPIO_Init+0x9c>)
 800090c:	f043 0308 	orr.w	r3, r3, #8
 8000910:	6313      	str	r3, [r2, #48]	@ 0x30
 8000912:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <MX_GPIO_Init+0x9c>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	f003 0308 	and.w	r3, r3, #8
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000924:	480b      	ldr	r0, [pc, #44]	@ (8000954 <MX_GPIO_Init+0xa0>)
 8000926:	f000 fd11 	bl	800134c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800092a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800092e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000930:	2301      	movs	r3, #1
 8000932:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2300      	movs	r3, #0
 800093a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	4619      	mov	r1, r3
 8000942:	4804      	ldr	r0, [pc, #16]	@ (8000954 <MX_GPIO_Init+0xa0>)
 8000944:	f000 fb66 	bl	8001014 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000948:	bf00      	nop
 800094a:	3720      	adds	r7, #32
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40023800 	.word	0x40023800
 8000954:	40020c00 	.word	0x40020c00

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <Error_Handler+0x8>

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b10      	ldr	r3, [pc, #64]	@ (80009b0 <HAL_MspInit+0x4c>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000972:	4a0f      	ldr	r2, [pc, #60]	@ (80009b0 <HAL_MspInit+0x4c>)
 8000974:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000978:	6453      	str	r3, [r2, #68]	@ 0x44
 800097a:	4b0d      	ldr	r3, [pc, #52]	@ (80009b0 <HAL_MspInit+0x4c>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	4b09      	ldr	r3, [pc, #36]	@ (80009b0 <HAL_MspInit+0x4c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098e:	4a08      	ldr	r2, [pc, #32]	@ (80009b0 <HAL_MspInit+0x4c>)
 8000990:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000994:	6413      	str	r3, [r2, #64]	@ 0x40
 8000996:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <HAL_MspInit+0x4c>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800

080009b4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a0b      	ldr	r2, [pc, #44]	@ (80009f0 <HAL_RNG_MspInit+0x3c>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d10d      	bne.n	80009e2 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	4b0a      	ldr	r3, [pc, #40]	@ (80009f4 <HAL_RNG_MspInit+0x40>)
 80009cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009ce:	4a09      	ldr	r2, [pc, #36]	@ (80009f4 <HAL_RNG_MspInit+0x40>)
 80009d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009d4:	6353      	str	r3, [r2, #52]	@ 0x34
 80009d6:	4b07      	ldr	r3, [pc, #28]	@ (80009f4 <HAL_RNG_MspInit+0x40>)
 80009d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 80009e2:	bf00      	nop
 80009e4:	3714      	adds	r7, #20
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	50060800 	.word	0x50060800
 80009f4:	40023800 	.word	0x40023800

080009f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a0e      	ldr	r2, [pc, #56]	@ (8000a40 <HAL_TIM_Base_MspInit+0x48>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d115      	bne.n	8000a36 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a44 <HAL_TIM_Base_MspInit+0x4c>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a12:	4a0c      	ldr	r2, [pc, #48]	@ (8000a44 <HAL_TIM_Base_MspInit+0x4c>)
 8000a14:	f043 0304 	orr.w	r3, r3, #4
 8000a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a44 <HAL_TIM_Base_MspInit+0x4c>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1e:	f003 0304 	and.w	r3, r3, #4
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2100      	movs	r1, #0
 8000a2a:	201e      	movs	r0, #30
 8000a2c:	f000 fa29 	bl	8000e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000a30:	201e      	movs	r0, #30
 8000a32:	f000 fa42 	bl	8000eba <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000a36:	bf00      	nop
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40000800 	.word	0x40000800
 8000a44:	40023800 	.word	0x40023800

08000a48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	@ 0x28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a1d      	ldr	r2, [pc, #116]	@ (8000adc <HAL_UART_MspInit+0x94>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d133      	bne.n	8000ad2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae0 <HAL_UART_MspInit+0x98>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a72:	4a1b      	ldr	r2, [pc, #108]	@ (8000ae0 <HAL_UART_MspInit+0x98>)
 8000a74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ae0 <HAL_UART_MspInit+0x98>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	4b15      	ldr	r3, [pc, #84]	@ (8000ae0 <HAL_UART_MspInit+0x98>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	4a14      	ldr	r2, [pc, #80]	@ (8000ae0 <HAL_UART_MspInit+0x98>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a96:	4b12      	ldr	r3, [pc, #72]	@ (8000ae0 <HAL_UART_MspInit+0x98>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000aa2:	230c      	movs	r3, #12
 8000aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ab2:	2307      	movs	r3, #7
 8000ab4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	4809      	ldr	r0, [pc, #36]	@ (8000ae4 <HAL_UART_MspInit+0x9c>)
 8000abe:	f000 faa9 	bl	8001014 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	2026      	movs	r0, #38	@ 0x26
 8000ac8:	f000 f9db 	bl	8000e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000acc:	2026      	movs	r0, #38	@ 0x26
 8000ace:	f000 f9f4 	bl	8000eba <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ad2:	bf00      	nop
 8000ad4:	3728      	adds	r7, #40	@ 0x28
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40004400 	.word	0x40004400
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020000 	.word	0x40020000

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <NMI_Handler+0x4>

08000af0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <HardFault_Handler+0x4>

08000af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <MemManage_Handler+0x4>

08000b00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <BusFault_Handler+0x4>

08000b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <UsageFault_Handler+0x4>

08000b10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b3e:	f000 f8a5 	bl	8000c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000b4c:	4802      	ldr	r0, [pc, #8]	@ (8000b58 <TIM4_IRQHandler+0x10>)
 8000b4e:	f001 f9c9 	bl	8001ee4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000040 	.word	0x20000040

08000b5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b60:	4802      	ldr	r0, [pc, #8]	@ (8000b6c <USART2_IRQHandler+0x10>)
 8000b62:	f001 fe21 	bl	80027a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000088 	.word	0x20000088

08000b70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b74:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <SystemInit+0x20>)
 8000b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b7a:	4a05      	ldr	r2, [pc, #20]	@ (8000b90 <SystemInit+0x20>)
 8000b7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bcc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b98:	f7ff ffea 	bl	8000b70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b9c:	480c      	ldr	r0, [pc, #48]	@ (8000bd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b9e:	490d      	ldr	r1, [pc, #52]	@ (8000bd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba4:	e002      	b.n	8000bac <LoopCopyDataInit>

08000ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000baa:	3304      	adds	r3, #4

08000bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb0:	d3f9      	bcc.n	8000ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bb4:	4c0a      	ldr	r4, [pc, #40]	@ (8000be0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb8:	e001      	b.n	8000bbe <LoopFillZerobss>

08000bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bbc:	3204      	adds	r2, #4

08000bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc0:	d3fb      	bcc.n	8000bba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bc2:	f002 fcf7 	bl	80035b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bc6:	f7ff fd17 	bl	80005f8 <main>
  bx  lr    
 8000bca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bd8:	0800363c 	.word	0x0800363c
  ldr r2, =_sbss
 8000bdc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000be0:	200000d4 	.word	0x200000d4

08000be4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be4:	e7fe      	b.n	8000be4 <ADC_IRQHandler>
	...

08000be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bec:	4b0e      	ldr	r3, [pc, #56]	@ (8000c28 <HAL_Init+0x40>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8000c28 <HAL_Init+0x40>)
 8000bf2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8000c28 <HAL_Init+0x40>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a0a      	ldr	r2, [pc, #40]	@ (8000c28 <HAL_Init+0x40>)
 8000bfe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c04:	4b08      	ldr	r3, [pc, #32]	@ (8000c28 <HAL_Init+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a07      	ldr	r2, [pc, #28]	@ (8000c28 <HAL_Init+0x40>)
 8000c0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c10:	2003      	movs	r0, #3
 8000c12:	f000 f92b 	bl	8000e6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c16:	200f      	movs	r0, #15
 8000c18:	f000 f808 	bl	8000c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c1c:	f7ff fea2 	bl	8000964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40023c00 	.word	0x40023c00

08000c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c34:	4b12      	ldr	r3, [pc, #72]	@ (8000c80 <HAL_InitTick+0x54>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b12      	ldr	r3, [pc, #72]	@ (8000c84 <HAL_InitTick+0x58>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 f943 	bl	8000ed6 <HAL_SYSTICK_Config>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e00e      	b.n	8000c78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b0f      	cmp	r3, #15
 8000c5e:	d80a      	bhi.n	8000c76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c60:	2200      	movs	r2, #0
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295
 8000c68:	f000 f90b 	bl	8000e82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c6c:	4a06      	ldr	r2, [pc, #24]	@ (8000c88 <HAL_InitTick+0x5c>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c72:	2300      	movs	r3, #0
 8000c74:	e000      	b.n	8000c78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000000 	.word	0x20000000
 8000c84:	20000008 	.word	0x20000008
 8000c88:	20000004 	.word	0x20000004

08000c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c90:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <HAL_IncTick+0x20>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <HAL_IncTick+0x24>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4a04      	ldr	r2, [pc, #16]	@ (8000cb0 <HAL_IncTick+0x24>)
 8000c9e:	6013      	str	r3, [r2, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	200000d0 	.word	0x200000d0

08000cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb8:	4b03      	ldr	r3, [pc, #12]	@ (8000cc8 <HAL_GetTick+0x14>)
 8000cba:	681b      	ldr	r3, [r3, #0]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	200000d0 	.word	0x200000d0

08000ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce2:	68ba      	ldr	r2, [r7, #8]
 8000ce4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cfe:	4a04      	ldr	r2, [pc, #16]	@ (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	60d3      	str	r3, [r2, #12]
}
 8000d04:	bf00      	nop
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d18:	4b04      	ldr	r3, [pc, #16]	@ (8000d2c <__NVIC_GetPriorityGrouping+0x18>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	0a1b      	lsrs	r3, r3, #8
 8000d1e:	f003 0307 	and.w	r3, r3, #7
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	db0b      	blt.n	8000d5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	f003 021f 	and.w	r2, r3, #31
 8000d48:	4907      	ldr	r1, [pc, #28]	@ (8000d68 <__NVIC_EnableIRQ+0x38>)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	095b      	lsrs	r3, r3, #5
 8000d50:	2001      	movs	r0, #1
 8000d52:	fa00 f202 	lsl.w	r2, r0, r2
 8000d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000e100 	.word	0xe000e100

08000d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	db0a      	blt.n	8000d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	490c      	ldr	r1, [pc, #48]	@ (8000db8 <__NVIC_SetPriority+0x4c>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	0112      	lsls	r2, r2, #4
 8000d8c:	b2d2      	uxtb	r2, r2
 8000d8e:	440b      	add	r3, r1
 8000d90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d94:	e00a      	b.n	8000dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4908      	ldr	r1, [pc, #32]	@ (8000dbc <__NVIC_SetPriority+0x50>)
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	f003 030f 	and.w	r3, r3, #15
 8000da2:	3b04      	subs	r3, #4
 8000da4:	0112      	lsls	r2, r2, #4
 8000da6:	b2d2      	uxtb	r2, r2
 8000da8:	440b      	add	r3, r1
 8000daa:	761a      	strb	r2, [r3, #24]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000e100 	.word	0xe000e100
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	@ 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	f1c3 0307 	rsb	r3, r3, #7
 8000dda:	2b04      	cmp	r3, #4
 8000ddc:	bf28      	it	cs
 8000dde:	2304      	movcs	r3, #4
 8000de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3304      	adds	r3, #4
 8000de6:	2b06      	cmp	r3, #6
 8000de8:	d902      	bls.n	8000df0 <NVIC_EncodePriority+0x30>
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3b03      	subs	r3, #3
 8000dee:	e000      	b.n	8000df2 <NVIC_EncodePriority+0x32>
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	f04f 32ff 	mov.w	r2, #4294967295
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43da      	mvns	r2, r3
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	401a      	ands	r2, r3
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e08:	f04f 31ff 	mov.w	r1, #4294967295
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e12:	43d9      	mvns	r1, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	4313      	orrs	r3, r2
         );
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3724      	adds	r7, #36	@ 0x24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
	...

08000e28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e38:	d301      	bcc.n	8000e3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e00f      	b.n	8000e5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e68 <SysTick_Config+0x40>)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e46:	210f      	movs	r1, #15
 8000e48:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4c:	f7ff ff8e 	bl	8000d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e50:	4b05      	ldr	r3, [pc, #20]	@ (8000e68 <SysTick_Config+0x40>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e56:	4b04      	ldr	r3, [pc, #16]	@ (8000e68 <SysTick_Config+0x40>)
 8000e58:	2207      	movs	r2, #7
 8000e5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	e000e010 	.word	0xe000e010

08000e6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f7ff ff29 	bl	8000ccc <__NVIC_SetPriorityGrouping>
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b086      	sub	sp, #24
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	4603      	mov	r3, r0
 8000e8a:	60b9      	str	r1, [r7, #8]
 8000e8c:	607a      	str	r2, [r7, #4]
 8000e8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e94:	f7ff ff3e 	bl	8000d14 <__NVIC_GetPriorityGrouping>
 8000e98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	68b9      	ldr	r1, [r7, #8]
 8000e9e:	6978      	ldr	r0, [r7, #20]
 8000ea0:	f7ff ff8e 	bl	8000dc0 <NVIC_EncodePriority>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eaa:	4611      	mov	r1, r2
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ff5d 	bl	8000d6c <__NVIC_SetPriority>
}
 8000eb2:	bf00      	nop
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff31 	bl	8000d30 <__NVIC_EnableIRQ>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff ffa2 	bl	8000e28 <SysTick_Config>
 8000ee4:	4603      	mov	r3, r0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b084      	sub	sp, #16
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000efa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000efc:	f7ff feda 	bl	8000cb4 <HAL_GetTick>
 8000f00:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d008      	beq.n	8000f20 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2280      	movs	r2, #128	@ 0x80
 8000f12:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2200      	movs	r2, #0
 8000f18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e052      	b.n	8000fc6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f022 0216 	bic.w	r2, r2, #22
 8000f2e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	695a      	ldr	r2, [r3, #20]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000f3e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d103      	bne.n	8000f50 <HAL_DMA_Abort+0x62>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d007      	beq.n	8000f60 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f022 0208 	bic.w	r2, r2, #8
 8000f5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f022 0201 	bic.w	r2, r2, #1
 8000f6e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f70:	e013      	b.n	8000f9a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f72:	f7ff fe9f 	bl	8000cb4 <HAL_GetTick>
 8000f76:	4602      	mov	r2, r0
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	2b05      	cmp	r3, #5
 8000f7e:	d90c      	bls.n	8000f9a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2220      	movs	r2, #32
 8000f84:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2203      	movs	r2, #3
 8000f8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e015      	b.n	8000fc6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1e4      	bne.n	8000f72 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fac:	223f      	movs	r2, #63	@ 0x3f
 8000fae:	409a      	lsls	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d004      	beq.n	8000fec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2280      	movs	r2, #128	@ 0x80
 8000fe6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e00c      	b.n	8001006 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2205      	movs	r2, #5
 8000ff0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f022 0201 	bic.w	r2, r2, #1
 8001002:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001014:	b480      	push	{r7}
 8001016:	b089      	sub	sp, #36	@ 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
 800102e:	e16b      	b.n	8001308 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001030:	2201      	movs	r2, #1
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	4013      	ands	r3, r2
 8001042:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	429a      	cmp	r2, r3
 800104a:	f040 815a 	bne.w	8001302 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	2b01      	cmp	r3, #1
 8001058:	d005      	beq.n	8001066 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001062:	2b02      	cmp	r3, #2
 8001064:	d130      	bne.n	80010c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	2203      	movs	r2, #3
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4013      	ands	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	68da      	ldr	r2, [r3, #12]
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4313      	orrs	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800109c:	2201      	movs	r2, #1
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	091b      	lsrs	r3, r3, #4
 80010b2:	f003 0201 	and.w	r2, r3, #1
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0303 	and.w	r3, r3, #3
 80010d0:	2b03      	cmp	r3, #3
 80010d2:	d017      	beq.n	8001104 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	2203      	movs	r2, #3
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d123      	bne.n	8001158 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	08da      	lsrs	r2, r3, #3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3208      	adds	r2, #8
 8001118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800111c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	f003 0307 	and.w	r3, r3, #7
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	220f      	movs	r2, #15
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	691a      	ldr	r2, [r3, #16]
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	08da      	lsrs	r2, r3, #3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3208      	adds	r2, #8
 8001152:	69b9      	ldr	r1, [r7, #24]
 8001154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	2203      	movs	r2, #3
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0203 	and.w	r2, r3, #3
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 80b4 	beq.w	8001302 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	4b60      	ldr	r3, [pc, #384]	@ (8001320 <HAL_GPIO_Init+0x30c>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a2:	4a5f      	ldr	r2, [pc, #380]	@ (8001320 <HAL_GPIO_Init+0x30c>)
 80011a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011aa:	4b5d      	ldr	r3, [pc, #372]	@ (8001320 <HAL_GPIO_Init+0x30c>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011b6:	4a5b      	ldr	r2, [pc, #364]	@ (8001324 <HAL_GPIO_Init+0x310>)
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	089b      	lsrs	r3, r3, #2
 80011bc:	3302      	adds	r3, #2
 80011be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f003 0303 	and.w	r3, r3, #3
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	220f      	movs	r2, #15
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a52      	ldr	r2, [pc, #328]	@ (8001328 <HAL_GPIO_Init+0x314>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d02b      	beq.n	800123a <HAL_GPIO_Init+0x226>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a51      	ldr	r2, [pc, #324]	@ (800132c <HAL_GPIO_Init+0x318>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d025      	beq.n	8001236 <HAL_GPIO_Init+0x222>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a50      	ldr	r2, [pc, #320]	@ (8001330 <HAL_GPIO_Init+0x31c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d01f      	beq.n	8001232 <HAL_GPIO_Init+0x21e>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4f      	ldr	r2, [pc, #316]	@ (8001334 <HAL_GPIO_Init+0x320>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d019      	beq.n	800122e <HAL_GPIO_Init+0x21a>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4e      	ldr	r2, [pc, #312]	@ (8001338 <HAL_GPIO_Init+0x324>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d013      	beq.n	800122a <HAL_GPIO_Init+0x216>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4d      	ldr	r2, [pc, #308]	@ (800133c <HAL_GPIO_Init+0x328>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d00d      	beq.n	8001226 <HAL_GPIO_Init+0x212>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4c      	ldr	r2, [pc, #304]	@ (8001340 <HAL_GPIO_Init+0x32c>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d007      	beq.n	8001222 <HAL_GPIO_Init+0x20e>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a4b      	ldr	r2, [pc, #300]	@ (8001344 <HAL_GPIO_Init+0x330>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d101      	bne.n	800121e <HAL_GPIO_Init+0x20a>
 800121a:	2307      	movs	r3, #7
 800121c:	e00e      	b.n	800123c <HAL_GPIO_Init+0x228>
 800121e:	2308      	movs	r3, #8
 8001220:	e00c      	b.n	800123c <HAL_GPIO_Init+0x228>
 8001222:	2306      	movs	r3, #6
 8001224:	e00a      	b.n	800123c <HAL_GPIO_Init+0x228>
 8001226:	2305      	movs	r3, #5
 8001228:	e008      	b.n	800123c <HAL_GPIO_Init+0x228>
 800122a:	2304      	movs	r3, #4
 800122c:	e006      	b.n	800123c <HAL_GPIO_Init+0x228>
 800122e:	2303      	movs	r3, #3
 8001230:	e004      	b.n	800123c <HAL_GPIO_Init+0x228>
 8001232:	2302      	movs	r3, #2
 8001234:	e002      	b.n	800123c <HAL_GPIO_Init+0x228>
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <HAL_GPIO_Init+0x228>
 800123a:	2300      	movs	r3, #0
 800123c:	69fa      	ldr	r2, [r7, #28]
 800123e:	f002 0203 	and.w	r2, r2, #3
 8001242:	0092      	lsls	r2, r2, #2
 8001244:	4093      	lsls	r3, r2
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800124c:	4935      	ldr	r1, [pc, #212]	@ (8001324 <HAL_GPIO_Init+0x310>)
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	089b      	lsrs	r3, r3, #2
 8001252:	3302      	adds	r3, #2
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800125a:	4b3b      	ldr	r3, [pc, #236]	@ (8001348 <HAL_GPIO_Init+0x334>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800127e:	4a32      	ldr	r2, [pc, #200]	@ (8001348 <HAL_GPIO_Init+0x334>)
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001284:	4b30      	ldr	r3, [pc, #192]	@ (8001348 <HAL_GPIO_Init+0x334>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012a8:	4a27      	ldr	r2, [pc, #156]	@ (8001348 <HAL_GPIO_Init+0x334>)
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012ae:	4b26      	ldr	r3, [pc, #152]	@ (8001348 <HAL_GPIO_Init+0x334>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012d2:	4a1d      	ldr	r2, [pc, #116]	@ (8001348 <HAL_GPIO_Init+0x334>)
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001348 <HAL_GPIO_Init+0x334>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012fc:	4a12      	ldr	r2, [pc, #72]	@ (8001348 <HAL_GPIO_Init+0x334>)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3301      	adds	r3, #1
 8001306:	61fb      	str	r3, [r7, #28]
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	2b0f      	cmp	r3, #15
 800130c:	f67f ae90 	bls.w	8001030 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001310:	bf00      	nop
 8001312:	bf00      	nop
 8001314:	3724      	adds	r7, #36	@ 0x24
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40023800 	.word	0x40023800
 8001324:	40013800 	.word	0x40013800
 8001328:	40020000 	.word	0x40020000
 800132c:	40020400 	.word	0x40020400
 8001330:	40020800 	.word	0x40020800
 8001334:	40020c00 	.word	0x40020c00
 8001338:	40021000 	.word	0x40021000
 800133c:	40021400 	.word	0x40021400
 8001340:	40021800 	.word	0x40021800
 8001344:	40021c00 	.word	0x40021c00
 8001348:	40013c00 	.word	0x40013c00

0800134c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	807b      	strh	r3, [r7, #2]
 8001358:	4613      	mov	r3, r2
 800135a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800135c:	787b      	ldrb	r3, [r7, #1]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001362:	887a      	ldrh	r2, [r7, #2]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001368:	e003      	b.n	8001372 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800136a:	887b      	ldrh	r3, [r7, #2]
 800136c:	041a      	lsls	r2, r3, #16
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	619a      	str	r2, [r3, #24]
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800137e:	b480      	push	{r7}
 8001380:	b085      	sub	sp, #20
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
 8001386:	460b      	mov	r3, r1
 8001388:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001390:	887a      	ldrh	r2, [r7, #2]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4013      	ands	r3, r2
 8001396:	041a      	lsls	r2, r3, #16
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	43d9      	mvns	r1, r3
 800139c:	887b      	ldrh	r3, [r7, #2]
 800139e:	400b      	ands	r3, r1
 80013a0:	431a      	orrs	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	619a      	str	r2, [r3, #24]
}
 80013a6:	bf00      	nop
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e267      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d075      	beq.n	80014be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013d2:	4b88      	ldr	r3, [pc, #544]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 030c 	and.w	r3, r3, #12
 80013da:	2b04      	cmp	r3, #4
 80013dc:	d00c      	beq.n	80013f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013de:	4b85      	ldr	r3, [pc, #532]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013e6:	2b08      	cmp	r3, #8
 80013e8:	d112      	bne.n	8001410 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ea:	4b82      	ldr	r3, [pc, #520]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80013f6:	d10b      	bne.n	8001410 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f8:	4b7e      	ldr	r3, [pc, #504]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d05b      	beq.n	80014bc <HAL_RCC_OscConfig+0x108>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d157      	bne.n	80014bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e242      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001418:	d106      	bne.n	8001428 <HAL_RCC_OscConfig+0x74>
 800141a:	4b76      	ldr	r3, [pc, #472]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a75      	ldr	r2, [pc, #468]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001420:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	e01d      	b.n	8001464 <HAL_RCC_OscConfig+0xb0>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001430:	d10c      	bne.n	800144c <HAL_RCC_OscConfig+0x98>
 8001432:	4b70      	ldr	r3, [pc, #448]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a6f      	ldr	r2, [pc, #444]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001438:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	4b6d      	ldr	r3, [pc, #436]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a6c      	ldr	r2, [pc, #432]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001444:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	e00b      	b.n	8001464 <HAL_RCC_OscConfig+0xb0>
 800144c:	4b69      	ldr	r3, [pc, #420]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a68      	ldr	r2, [pc, #416]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001452:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	4b66      	ldr	r3, [pc, #408]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a65      	ldr	r2, [pc, #404]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 800145e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001462:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d013      	beq.n	8001494 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146c:	f7ff fc22 	bl	8000cb4 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001474:	f7ff fc1e 	bl	8000cb4 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b64      	cmp	r3, #100	@ 0x64
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e207      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001486:	4b5b      	ldr	r3, [pc, #364]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d0f0      	beq.n	8001474 <HAL_RCC_OscConfig+0xc0>
 8001492:	e014      	b.n	80014be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001494:	f7ff fc0e 	bl	8000cb4 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800149c:	f7ff fc0a 	bl	8000cb4 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b64      	cmp	r3, #100	@ 0x64
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e1f3      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ae:	4b51      	ldr	r3, [pc, #324]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1f0      	bne.n	800149c <HAL_RCC_OscConfig+0xe8>
 80014ba:	e000      	b.n	80014be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d063      	beq.n	8001592 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014ca:	4b4a      	ldr	r3, [pc, #296]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 030c 	and.w	r3, r3, #12
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00b      	beq.n	80014ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014d6:	4b47      	ldr	r3, [pc, #284]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014de:	2b08      	cmp	r3, #8
 80014e0:	d11c      	bne.n	800151c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014e2:	4b44      	ldr	r3, [pc, #272]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d116      	bne.n	800151c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ee:	4b41      	ldr	r3, [pc, #260]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d005      	beq.n	8001506 <HAL_RCC_OscConfig+0x152>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d001      	beq.n	8001506 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e1c7      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001506:	4b3b      	ldr	r3, [pc, #236]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	4937      	ldr	r1, [pc, #220]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001516:	4313      	orrs	r3, r2
 8001518:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800151a:	e03a      	b.n	8001592 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d020      	beq.n	8001566 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001524:	4b34      	ldr	r3, [pc, #208]	@ (80015f8 <HAL_RCC_OscConfig+0x244>)
 8001526:	2201      	movs	r2, #1
 8001528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152a:	f7ff fbc3 	bl	8000cb4 <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001532:	f7ff fbbf 	bl	8000cb4 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e1a8      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001544:	4b2b      	ldr	r3, [pc, #172]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0f0      	beq.n	8001532 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001550:	4b28      	ldr	r3, [pc, #160]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	4925      	ldr	r1, [pc, #148]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001560:	4313      	orrs	r3, r2
 8001562:	600b      	str	r3, [r1, #0]
 8001564:	e015      	b.n	8001592 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001566:	4b24      	ldr	r3, [pc, #144]	@ (80015f8 <HAL_RCC_OscConfig+0x244>)
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156c:	f7ff fba2 	bl	8000cb4 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001574:	f7ff fb9e 	bl	8000cb4 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e187      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001586:	4b1b      	ldr	r3, [pc, #108]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f0      	bne.n	8001574 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	2b00      	cmp	r3, #0
 800159c:	d036      	beq.n	800160c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d016      	beq.n	80015d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015a6:	4b15      	ldr	r3, [pc, #84]	@ (80015fc <HAL_RCC_OscConfig+0x248>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ac:	f7ff fb82 	bl	8000cb4 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015b4:	f7ff fb7e 	bl	8000cb4 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e167      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015c6:	4b0b      	ldr	r3, [pc, #44]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80015c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0f0      	beq.n	80015b4 <HAL_RCC_OscConfig+0x200>
 80015d2:	e01b      	b.n	800160c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015d4:	4b09      	ldr	r3, [pc, #36]	@ (80015fc <HAL_RCC_OscConfig+0x248>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015da:	f7ff fb6b 	bl	8000cb4 <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e0:	e00e      	b.n	8001600 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015e2:	f7ff fb67 	bl	8000cb4 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d907      	bls.n	8001600 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e150      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
 80015f4:	40023800 	.word	0x40023800
 80015f8:	42470000 	.word	0x42470000
 80015fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001600:	4b88      	ldr	r3, [pc, #544]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001602:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1ea      	bne.n	80015e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0304 	and.w	r3, r3, #4
 8001614:	2b00      	cmp	r3, #0
 8001616:	f000 8097 	beq.w	8001748 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800161a:	2300      	movs	r3, #0
 800161c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800161e:	4b81      	ldr	r3, [pc, #516]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10f      	bne.n	800164a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	4b7d      	ldr	r3, [pc, #500]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001632:	4a7c      	ldr	r2, [pc, #496]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001634:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001638:	6413      	str	r3, [r2, #64]	@ 0x40
 800163a:	4b7a      	ldr	r3, [pc, #488]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001646:	2301      	movs	r3, #1
 8001648:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164a:	4b77      	ldr	r3, [pc, #476]	@ (8001828 <HAL_RCC_OscConfig+0x474>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001652:	2b00      	cmp	r3, #0
 8001654:	d118      	bne.n	8001688 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001656:	4b74      	ldr	r3, [pc, #464]	@ (8001828 <HAL_RCC_OscConfig+0x474>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a73      	ldr	r2, [pc, #460]	@ (8001828 <HAL_RCC_OscConfig+0x474>)
 800165c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001660:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001662:	f7ff fb27 	bl	8000cb4 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800166a:	f7ff fb23 	bl	8000cb4 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e10c      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800167c:	4b6a      	ldr	r3, [pc, #424]	@ (8001828 <HAL_RCC_OscConfig+0x474>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0f0      	beq.n	800166a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d106      	bne.n	800169e <HAL_RCC_OscConfig+0x2ea>
 8001690:	4b64      	ldr	r3, [pc, #400]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001694:	4a63      	ldr	r2, [pc, #396]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	6713      	str	r3, [r2, #112]	@ 0x70
 800169c:	e01c      	b.n	80016d8 <HAL_RCC_OscConfig+0x324>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	2b05      	cmp	r3, #5
 80016a4:	d10c      	bne.n	80016c0 <HAL_RCC_OscConfig+0x30c>
 80016a6:	4b5f      	ldr	r3, [pc, #380]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80016a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016aa:	4a5e      	ldr	r2, [pc, #376]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80016ac:	f043 0304 	orr.w	r3, r3, #4
 80016b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80016b2:	4b5c      	ldr	r3, [pc, #368]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80016b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016b6:	4a5b      	ldr	r2, [pc, #364]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80016be:	e00b      	b.n	80016d8 <HAL_RCC_OscConfig+0x324>
 80016c0:	4b58      	ldr	r3, [pc, #352]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80016c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016c4:	4a57      	ldr	r2, [pc, #348]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80016c6:	f023 0301 	bic.w	r3, r3, #1
 80016ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80016cc:	4b55      	ldr	r3, [pc, #340]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80016ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016d0:	4a54      	ldr	r2, [pc, #336]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80016d2:	f023 0304 	bic.w	r3, r3, #4
 80016d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d015      	beq.n	800170c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e0:	f7ff fae8 	bl	8000cb4 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e6:	e00a      	b.n	80016fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016e8:	f7ff fae4 	bl	8000cb4 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e0cb      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016fe:	4b49      	ldr	r3, [pc, #292]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0ee      	beq.n	80016e8 <HAL_RCC_OscConfig+0x334>
 800170a:	e014      	b.n	8001736 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800170c:	f7ff fad2 	bl	8000cb4 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001712:	e00a      	b.n	800172a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001714:	f7ff face 	bl	8000cb4 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001722:	4293      	cmp	r3, r2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e0b5      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800172a:	4b3e      	ldr	r3, [pc, #248]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 800172c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1ee      	bne.n	8001714 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001736:	7dfb      	ldrb	r3, [r7, #23]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d105      	bne.n	8001748 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800173c:	4b39      	ldr	r3, [pc, #228]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 800173e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001740:	4a38      	ldr	r2, [pc, #224]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001742:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001746:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 80a1 	beq.w	8001894 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001752:	4b34      	ldr	r3, [pc, #208]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 030c 	and.w	r3, r3, #12
 800175a:	2b08      	cmp	r3, #8
 800175c:	d05c      	beq.n	8001818 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d141      	bne.n	80017ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001766:	4b31      	ldr	r3, [pc, #196]	@ (800182c <HAL_RCC_OscConfig+0x478>)
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176c:	f7ff faa2 	bl	8000cb4 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001774:	f7ff fa9e 	bl	8000cb4 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e087      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001786:	4b27      	ldr	r3, [pc, #156]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f0      	bne.n	8001774 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69da      	ldr	r2, [r3, #28]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a1b      	ldr	r3, [r3, #32]
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a0:	019b      	lsls	r3, r3, #6
 80017a2:	431a      	orrs	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a8:	085b      	lsrs	r3, r3, #1
 80017aa:	3b01      	subs	r3, #1
 80017ac:	041b      	lsls	r3, r3, #16
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b4:	061b      	lsls	r3, r3, #24
 80017b6:	491b      	ldr	r1, [pc, #108]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80017b8:	4313      	orrs	r3, r2
 80017ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017bc:	4b1b      	ldr	r3, [pc, #108]	@ (800182c <HAL_RCC_OscConfig+0x478>)
 80017be:	2201      	movs	r2, #1
 80017c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c2:	f7ff fa77 	bl	8000cb4 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ca:	f7ff fa73 	bl	8000cb4 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e05c      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017dc:	4b11      	ldr	r3, [pc, #68]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0f0      	beq.n	80017ca <HAL_RCC_OscConfig+0x416>
 80017e8:	e054      	b.n	8001894 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ea:	4b10      	ldr	r3, [pc, #64]	@ (800182c <HAL_RCC_OscConfig+0x478>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f0:	f7ff fa60 	bl	8000cb4 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f8:	f7ff fa5c 	bl	8000cb4 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e045      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800180a:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x444>
 8001816:	e03d      	b.n	8001894 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d107      	bne.n	8001830 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e038      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
 8001824:	40023800 	.word	0x40023800
 8001828:	40007000 	.word	0x40007000
 800182c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001830:	4b1b      	ldr	r3, [pc, #108]	@ (80018a0 <HAL_RCC_OscConfig+0x4ec>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d028      	beq.n	8001890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001848:	429a      	cmp	r2, r3
 800184a:	d121      	bne.n	8001890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001856:	429a      	cmp	r2, r3
 8001858:	d11a      	bne.n	8001890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001860:	4013      	ands	r3, r2
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001866:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001868:	4293      	cmp	r3, r2
 800186a:	d111      	bne.n	8001890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001876:	085b      	lsrs	r3, r3, #1
 8001878:	3b01      	subs	r3, #1
 800187a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800187c:	429a      	cmp	r2, r3
 800187e:	d107      	bne.n	8001890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800188a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800188c:	429a      	cmp	r2, r3
 800188e:	d001      	beq.n	8001894 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e000      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40023800 	.word	0x40023800

080018a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e0cc      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018b8:	4b68      	ldr	r3, [pc, #416]	@ (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d90c      	bls.n	80018e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c6:	4b65      	ldr	r3, [pc, #404]	@ (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ce:	4b63      	ldr	r3, [pc, #396]	@ (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d001      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e0b8      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d020      	beq.n	800192e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d005      	beq.n	8001904 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018f8:	4b59      	ldr	r3, [pc, #356]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	4a58      	ldr	r2, [pc, #352]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001902:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0308 	and.w	r3, r3, #8
 800190c:	2b00      	cmp	r3, #0
 800190e:	d005      	beq.n	800191c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001910:	4b53      	ldr	r3, [pc, #332]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	4a52      	ldr	r2, [pc, #328]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800191a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800191c:	4b50      	ldr	r3, [pc, #320]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	494d      	ldr	r1, [pc, #308]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	4313      	orrs	r3, r2
 800192c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d044      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d107      	bne.n	8001952 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001942:	4b47      	ldr	r3, [pc, #284]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d119      	bne.n	8001982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e07f      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b02      	cmp	r3, #2
 8001958:	d003      	beq.n	8001962 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800195e:	2b03      	cmp	r3, #3
 8001960:	d107      	bne.n	8001972 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001962:	4b3f      	ldr	r3, [pc, #252]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d109      	bne.n	8001982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e06f      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001972:	4b3b      	ldr	r3, [pc, #236]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e067      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001982:	4b37      	ldr	r3, [pc, #220]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f023 0203 	bic.w	r2, r3, #3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	4934      	ldr	r1, [pc, #208]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001990:	4313      	orrs	r3, r2
 8001992:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001994:	f7ff f98e 	bl	8000cb4 <HAL_GetTick>
 8001998:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199a:	e00a      	b.n	80019b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800199c:	f7ff f98a 	bl	8000cb4 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e04f      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 020c 	and.w	r2, r3, #12
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d1eb      	bne.n	800199c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019c4:	4b25      	ldr	r3, [pc, #148]	@ (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d20c      	bcs.n	80019ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d2:	4b22      	ldr	r3, [pc, #136]	@ (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019da:	4b20      	ldr	r3, [pc, #128]	@ (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e032      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d008      	beq.n	8001a0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019f8:	4b19      	ldr	r3, [pc, #100]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	4916      	ldr	r1, [pc, #88]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d009      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a16:	4b12      	ldr	r3, [pc, #72]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	490e      	ldr	r1, [pc, #56]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a2a:	f000 f821 	bl	8001a70 <HAL_RCC_GetSysClockFreq>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	4b0b      	ldr	r3, [pc, #44]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	091b      	lsrs	r3, r3, #4
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	490a      	ldr	r1, [pc, #40]	@ (8001a64 <HAL_RCC_ClockConfig+0x1c0>)
 8001a3c:	5ccb      	ldrb	r3, [r1, r3]
 8001a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a42:	4a09      	ldr	r2, [pc, #36]	@ (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a46:	4b09      	ldr	r3, [pc, #36]	@ (8001a6c <HAL_RCC_ClockConfig+0x1c8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff f8ee 	bl	8000c2c <HAL_InitTick>

  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40023c00 	.word	0x40023c00
 8001a60:	40023800 	.word	0x40023800
 8001a64:	08003614 	.word	0x08003614
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	20000004 	.word	0x20000004

08001a70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a74:	b090      	sub	sp, #64	@ 0x40
 8001a76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a80:	2300      	movs	r3, #0
 8001a82:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001a84:	2300      	movs	r3, #0
 8001a86:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a88:	4b59      	ldr	r3, [pc, #356]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 030c 	and.w	r3, r3, #12
 8001a90:	2b08      	cmp	r3, #8
 8001a92:	d00d      	beq.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x40>
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	f200 80a1 	bhi.w	8001bdc <HAL_RCC_GetSysClockFreq+0x16c>
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d002      	beq.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x34>
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	d003      	beq.n	8001aaa <HAL_RCC_GetSysClockFreq+0x3a>
 8001aa2:	e09b      	b.n	8001bdc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001aa4:	4b53      	ldr	r3, [pc, #332]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8001aa8:	e09b      	b.n	8001be2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aaa:	4b53      	ldr	r3, [pc, #332]	@ (8001bf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001aac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001aae:	e098      	b.n	8001be2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ab0:	4b4f      	ldr	r3, [pc, #316]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ab8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001aba:	4b4d      	ldr	r3, [pc, #308]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d028      	beq.n	8001b18 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ac6:	4b4a      	ldr	r3, [pc, #296]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	099b      	lsrs	r3, r3, #6
 8001acc:	2200      	movs	r2, #0
 8001ace:	623b      	str	r3, [r7, #32]
 8001ad0:	627a      	str	r2, [r7, #36]	@ 0x24
 8001ad2:	6a3b      	ldr	r3, [r7, #32]
 8001ad4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4b47      	ldr	r3, [pc, #284]	@ (8001bf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001adc:	fb03 f201 	mul.w	r2, r3, r1
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	fb00 f303 	mul.w	r3, r0, r3
 8001ae6:	4413      	add	r3, r2
 8001ae8:	4a43      	ldr	r2, [pc, #268]	@ (8001bf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001aea:	fba0 1202 	umull	r1, r2, r0, r2
 8001aee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001af0:	460a      	mov	r2, r1
 8001af2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001af4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001af6:	4413      	add	r3, r2
 8001af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001afc:	2200      	movs	r2, #0
 8001afe:	61bb      	str	r3, [r7, #24]
 8001b00:	61fa      	str	r2, [r7, #28]
 8001b02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001b0a:	f7fe fb5d 	bl	80001c8 <__aeabi_uldivmod>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4613      	mov	r3, r2
 8001b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b16:	e053      	b.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b18:	4b35      	ldr	r3, [pc, #212]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	099b      	lsrs	r3, r3, #6
 8001b1e:	2200      	movs	r2, #0
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	617a      	str	r2, [r7, #20]
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b2a:	f04f 0b00 	mov.w	fp, #0
 8001b2e:	4652      	mov	r2, sl
 8001b30:	465b      	mov	r3, fp
 8001b32:	f04f 0000 	mov.w	r0, #0
 8001b36:	f04f 0100 	mov.w	r1, #0
 8001b3a:	0159      	lsls	r1, r3, #5
 8001b3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b40:	0150      	lsls	r0, r2, #5
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	ebb2 080a 	subs.w	r8, r2, sl
 8001b4a:	eb63 090b 	sbc.w	r9, r3, fp
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001b5a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001b5e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001b62:	ebb2 0408 	subs.w	r4, r2, r8
 8001b66:	eb63 0509 	sbc.w	r5, r3, r9
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	f04f 0300 	mov.w	r3, #0
 8001b72:	00eb      	lsls	r3, r5, #3
 8001b74:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b78:	00e2      	lsls	r2, r4, #3
 8001b7a:	4614      	mov	r4, r2
 8001b7c:	461d      	mov	r5, r3
 8001b7e:	eb14 030a 	adds.w	r3, r4, sl
 8001b82:	603b      	str	r3, [r7, #0]
 8001b84:	eb45 030b 	adc.w	r3, r5, fp
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	f04f 0200 	mov.w	r2, #0
 8001b8e:	f04f 0300 	mov.w	r3, #0
 8001b92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b96:	4629      	mov	r1, r5
 8001b98:	028b      	lsls	r3, r1, #10
 8001b9a:	4621      	mov	r1, r4
 8001b9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ba0:	4621      	mov	r1, r4
 8001ba2:	028a      	lsls	r2, r1, #10
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001baa:	2200      	movs	r2, #0
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	60fa      	str	r2, [r7, #12]
 8001bb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bb4:	f7fe fb08 	bl	80001c8 <__aeabi_uldivmod>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	0c1b      	lsrs	r3, r3, #16
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	3301      	adds	r3, #1
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8001bd0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001bda:	e002      	b.n	8001be2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bdc:	4b05      	ldr	r3, [pc, #20]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001bde:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001be0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3740      	adds	r7, #64	@ 0x40
 8001be8:	46bd      	mov	sp, r7
 8001bea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	00f42400 	.word	0x00f42400
 8001bf8:	017d7840 	.word	0x017d7840

08001bfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c00:	4b03      	ldr	r3, [pc, #12]	@ (8001c10 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c02:	681b      	ldr	r3, [r3, #0]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	20000000 	.word	0x20000000

08001c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c18:	f7ff fff0 	bl	8001bfc <HAL_RCC_GetHCLKFreq>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	4b05      	ldr	r3, [pc, #20]	@ (8001c34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	0a9b      	lsrs	r3, r3, #10
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	4903      	ldr	r1, [pc, #12]	@ (8001c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c2a:	5ccb      	ldrb	r3, [r1, r3]
 8001c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40023800 	.word	0x40023800
 8001c38:	08003624 	.word	0x08003624

08001c3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c40:	f7ff ffdc 	bl	8001bfc <HAL_RCC_GetHCLKFreq>
 8001c44:	4602      	mov	r2, r0
 8001c46:	4b05      	ldr	r3, [pc, #20]	@ (8001c5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	0b5b      	lsrs	r3, r3, #13
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	4903      	ldr	r1, [pc, #12]	@ (8001c60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c52:	5ccb      	ldrb	r3, [r1, r3]
 8001c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	08003624 	.word	0x08003624

08001c64 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e01c      	b.n	8001cb0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	795b      	ldrb	r3, [r3, #5]
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d105      	bne.n	8001c8c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7fe fe94 	bl	80009b4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f042 0204 	orr.w	r2, r2, #4
 8001ca0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	791b      	ldrb	r3, [r3, #4]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d101      	bne.n	8001cd2 <HAL_RNG_GenerateRandomNumber+0x1a>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e044      	b.n	8001d5c <HAL_RNG_GenerateRandomNumber+0xa4>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	795b      	ldrb	r3, [r3, #5]
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d133      	bne.n	8001d4a <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2202      	movs	r2, #2
 8001ce6:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001ce8:	f7fe ffe4 	bl	8000cb4 <HAL_GetTick>
 8001cec:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8001cee:	e018      	b.n	8001d22 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8001cf0:	f7fe ffe0 	bl	8000cb4 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d911      	bls.n	8001d22 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d00a      	beq.n	8001d22 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2202      	movs	r2, #2
 8001d16:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e01c      	b.n	8001d5c <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d1df      	bne.n	8001cf0 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689a      	ldr	r2, [r3, #8]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68da      	ldr	r2, [r3, #12]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	715a      	strb	r2, [r3, #5]
 8001d48:	e004      	b.n	8001d54 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2204      	movs	r2, #4
 8001d4e:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	711a      	strb	r2, [r3, #4]

  return status;
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e041      	b.n	8001dfa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d106      	bne.n	8001d90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7fe fe34 	bl	80009f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2202      	movs	r2, #2
 8001d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3304      	adds	r3, #4
 8001da0:	4619      	mov	r1, r3
 8001da2:	4610      	mov	r0, r2
 8001da4:	f000 fa7e 	bl	80022a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d001      	beq.n	8001e1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e04e      	b.n	8001eba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2202      	movs	r2, #2
 8001e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68da      	ldr	r2, [r3, #12]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 0201 	orr.w	r2, r2, #1
 8001e32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a23      	ldr	r2, [pc, #140]	@ (8001ec8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d022      	beq.n	8001e84 <HAL_TIM_Base_Start_IT+0x80>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e46:	d01d      	beq.n	8001e84 <HAL_TIM_Base_Start_IT+0x80>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a1f      	ldr	r2, [pc, #124]	@ (8001ecc <HAL_TIM_Base_Start_IT+0xc8>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d018      	beq.n	8001e84 <HAL_TIM_Base_Start_IT+0x80>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a1e      	ldr	r2, [pc, #120]	@ (8001ed0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d013      	beq.n	8001e84 <HAL_TIM_Base_Start_IT+0x80>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a1c      	ldr	r2, [pc, #112]	@ (8001ed4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d00e      	beq.n	8001e84 <HAL_TIM_Base_Start_IT+0x80>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ed8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d009      	beq.n	8001e84 <HAL_TIM_Base_Start_IT+0x80>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a19      	ldr	r2, [pc, #100]	@ (8001edc <HAL_TIM_Base_Start_IT+0xd8>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d004      	beq.n	8001e84 <HAL_TIM_Base_Start_IT+0x80>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a18      	ldr	r2, [pc, #96]	@ (8001ee0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d111      	bne.n	8001ea8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2b06      	cmp	r3, #6
 8001e94:	d010      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f042 0201 	orr.w	r2, r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ea6:	e007      	b.n	8001eb8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f042 0201 	orr.w	r2, r2, #1
 8001eb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	40010000 	.word	0x40010000
 8001ecc:	40000400 	.word	0x40000400
 8001ed0:	40000800 	.word	0x40000800
 8001ed4:	40000c00 	.word	0x40000c00
 8001ed8:	40010400 	.word	0x40010400
 8001edc:	40014000 	.word	0x40014000
 8001ee0:	40001800 	.word	0x40001800

08001ee4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d020      	beq.n	8001f48 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d01b      	beq.n	8001f48 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f06f 0202 	mvn.w	r2, #2
 8001f18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f999 	bl	8002266 <HAL_TIM_IC_CaptureCallback>
 8001f34:	e005      	b.n	8001f42 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f98b 	bl	8002252 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 f99c 	bl	800227a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d020      	beq.n	8001f94 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d01b      	beq.n	8001f94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f06f 0204 	mvn.w	r2, #4
 8001f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2202      	movs	r2, #2
 8001f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f973 	bl	8002266 <HAL_TIM_IC_CaptureCallback>
 8001f80:	e005      	b.n	8001f8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f965 	bl	8002252 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 f976 	bl	800227a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	f003 0308 	and.w	r3, r3, #8
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d020      	beq.n	8001fe0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f003 0308 	and.w	r3, r3, #8
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d01b      	beq.n	8001fe0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f06f 0208 	mvn.w	r2, #8
 8001fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2204      	movs	r2, #4
 8001fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f94d 	bl	8002266 <HAL_TIM_IC_CaptureCallback>
 8001fcc:	e005      	b.n	8001fda <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f93f 	bl	8002252 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 f950 	bl	800227a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	f003 0310 	and.w	r3, r3, #16
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d020      	beq.n	800202c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f003 0310 	and.w	r3, r3, #16
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d01b      	beq.n	800202c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f06f 0210 	mvn.w	r2, #16
 8001ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2208      	movs	r2, #8
 8002002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f927 	bl	8002266 <HAL_TIM_IC_CaptureCallback>
 8002018:	e005      	b.n	8002026 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f919 	bl	8002252 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f92a 	bl	800227a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00c      	beq.n	8002050 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b00      	cmp	r3, #0
 800203e:	d007      	beq.n	8002050 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f06f 0201 	mvn.w	r2, #1
 8002048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7fe fa8e 	bl	800056c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00c      	beq.n	8002074 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002060:	2b00      	cmp	r3, #0
 8002062:	d007      	beq.n	8002074 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800206c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 fae4 	bl	800263c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00c      	beq.n	8002098 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002084:	2b00      	cmp	r3, #0
 8002086:	d007      	beq.n	8002098 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f8fb 	bl	800228e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	f003 0320 	and.w	r3, r3, #32
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00c      	beq.n	80020bc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f003 0320 	and.w	r3, r3, #32
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d007      	beq.n	80020bc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f06f 0220 	mvn.w	r2, #32
 80020b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 fab6 	bl	8002628 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020bc:	bf00      	nop
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <HAL_TIM_ConfigClockSource+0x1c>
 80020dc:	2302      	movs	r3, #2
 80020de:	e0b4      	b.n	800224a <HAL_TIM_ConfigClockSource+0x186>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2202      	movs	r2, #2
 80020ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80020fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002106:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002118:	d03e      	beq.n	8002198 <HAL_TIM_ConfigClockSource+0xd4>
 800211a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800211e:	f200 8087 	bhi.w	8002230 <HAL_TIM_ConfigClockSource+0x16c>
 8002122:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002126:	f000 8086 	beq.w	8002236 <HAL_TIM_ConfigClockSource+0x172>
 800212a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800212e:	d87f      	bhi.n	8002230 <HAL_TIM_ConfigClockSource+0x16c>
 8002130:	2b70      	cmp	r3, #112	@ 0x70
 8002132:	d01a      	beq.n	800216a <HAL_TIM_ConfigClockSource+0xa6>
 8002134:	2b70      	cmp	r3, #112	@ 0x70
 8002136:	d87b      	bhi.n	8002230 <HAL_TIM_ConfigClockSource+0x16c>
 8002138:	2b60      	cmp	r3, #96	@ 0x60
 800213a:	d050      	beq.n	80021de <HAL_TIM_ConfigClockSource+0x11a>
 800213c:	2b60      	cmp	r3, #96	@ 0x60
 800213e:	d877      	bhi.n	8002230 <HAL_TIM_ConfigClockSource+0x16c>
 8002140:	2b50      	cmp	r3, #80	@ 0x50
 8002142:	d03c      	beq.n	80021be <HAL_TIM_ConfigClockSource+0xfa>
 8002144:	2b50      	cmp	r3, #80	@ 0x50
 8002146:	d873      	bhi.n	8002230 <HAL_TIM_ConfigClockSource+0x16c>
 8002148:	2b40      	cmp	r3, #64	@ 0x40
 800214a:	d058      	beq.n	80021fe <HAL_TIM_ConfigClockSource+0x13a>
 800214c:	2b40      	cmp	r3, #64	@ 0x40
 800214e:	d86f      	bhi.n	8002230 <HAL_TIM_ConfigClockSource+0x16c>
 8002150:	2b30      	cmp	r3, #48	@ 0x30
 8002152:	d064      	beq.n	800221e <HAL_TIM_ConfigClockSource+0x15a>
 8002154:	2b30      	cmp	r3, #48	@ 0x30
 8002156:	d86b      	bhi.n	8002230 <HAL_TIM_ConfigClockSource+0x16c>
 8002158:	2b20      	cmp	r3, #32
 800215a:	d060      	beq.n	800221e <HAL_TIM_ConfigClockSource+0x15a>
 800215c:	2b20      	cmp	r3, #32
 800215e:	d867      	bhi.n	8002230 <HAL_TIM_ConfigClockSource+0x16c>
 8002160:	2b00      	cmp	r3, #0
 8002162:	d05c      	beq.n	800221e <HAL_TIM_ConfigClockSource+0x15a>
 8002164:	2b10      	cmp	r3, #16
 8002166:	d05a      	beq.n	800221e <HAL_TIM_ConfigClockSource+0x15a>
 8002168:	e062      	b.n	8002230 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800217a:	f000 f9b9 	bl	80024f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800218c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	609a      	str	r2, [r3, #8]
      break;
 8002196:	e04f      	b.n	8002238 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80021a8:	f000 f9a2 	bl	80024f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80021ba:	609a      	str	r2, [r3, #8]
      break;
 80021bc:	e03c      	b.n	8002238 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021ca:	461a      	mov	r2, r3
 80021cc:	f000 f916 	bl	80023fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2150      	movs	r1, #80	@ 0x50
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 f96f 	bl	80024ba <TIM_ITRx_SetConfig>
      break;
 80021dc:	e02c      	b.n	8002238 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021ea:	461a      	mov	r2, r3
 80021ec:	f000 f935 	bl	800245a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2160      	movs	r1, #96	@ 0x60
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 f95f 	bl	80024ba <TIM_ITRx_SetConfig>
      break;
 80021fc:	e01c      	b.n	8002238 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800220a:	461a      	mov	r2, r3
 800220c:	f000 f8f6 	bl	80023fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2140      	movs	r1, #64	@ 0x40
 8002216:	4618      	mov	r0, r3
 8002218:	f000 f94f 	bl	80024ba <TIM_ITRx_SetConfig>
      break;
 800221c:	e00c      	b.n	8002238 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4619      	mov	r1, r3
 8002228:	4610      	mov	r0, r2
 800222a:	f000 f946 	bl	80024ba <TIM_ITRx_SetConfig>
      break;
 800222e:	e003      	b.n	8002238 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	73fb      	strb	r3, [r7, #15]
      break;
 8002234:	e000      	b.n	8002238 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002236:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002248:	7bfb      	ldrb	r3, [r7, #15]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
	...

080022a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a46      	ldr	r2, [pc, #280]	@ (80023d0 <TIM_Base_SetConfig+0x12c>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d013      	beq.n	80022e4 <TIM_Base_SetConfig+0x40>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022c2:	d00f      	beq.n	80022e4 <TIM_Base_SetConfig+0x40>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a43      	ldr	r2, [pc, #268]	@ (80023d4 <TIM_Base_SetConfig+0x130>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d00b      	beq.n	80022e4 <TIM_Base_SetConfig+0x40>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a42      	ldr	r2, [pc, #264]	@ (80023d8 <TIM_Base_SetConfig+0x134>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d007      	beq.n	80022e4 <TIM_Base_SetConfig+0x40>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a41      	ldr	r2, [pc, #260]	@ (80023dc <TIM_Base_SetConfig+0x138>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d003      	beq.n	80022e4 <TIM_Base_SetConfig+0x40>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a40      	ldr	r2, [pc, #256]	@ (80023e0 <TIM_Base_SetConfig+0x13c>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d108      	bne.n	80022f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a35      	ldr	r2, [pc, #212]	@ (80023d0 <TIM_Base_SetConfig+0x12c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d02b      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002304:	d027      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a32      	ldr	r2, [pc, #200]	@ (80023d4 <TIM_Base_SetConfig+0x130>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d023      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a31      	ldr	r2, [pc, #196]	@ (80023d8 <TIM_Base_SetConfig+0x134>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d01f      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a30      	ldr	r2, [pc, #192]	@ (80023dc <TIM_Base_SetConfig+0x138>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d01b      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a2f      	ldr	r2, [pc, #188]	@ (80023e0 <TIM_Base_SetConfig+0x13c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d017      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a2e      	ldr	r2, [pc, #184]	@ (80023e4 <TIM_Base_SetConfig+0x140>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d013      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a2d      	ldr	r2, [pc, #180]	@ (80023e8 <TIM_Base_SetConfig+0x144>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d00f      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a2c      	ldr	r2, [pc, #176]	@ (80023ec <TIM_Base_SetConfig+0x148>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d00b      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a2b      	ldr	r2, [pc, #172]	@ (80023f0 <TIM_Base_SetConfig+0x14c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d007      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a2a      	ldr	r2, [pc, #168]	@ (80023f4 <TIM_Base_SetConfig+0x150>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d003      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a29      	ldr	r2, [pc, #164]	@ (80023f8 <TIM_Base_SetConfig+0x154>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d108      	bne.n	8002368 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800235c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	4313      	orrs	r3, r2
 8002366:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	4313      	orrs	r3, r2
 8002374:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a10      	ldr	r2, [pc, #64]	@ (80023d0 <TIM_Base_SetConfig+0x12c>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d003      	beq.n	800239c <TIM_Base_SetConfig+0xf8>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a12      	ldr	r2, [pc, #72]	@ (80023e0 <TIM_Base_SetConfig+0x13c>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d103      	bne.n	80023a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	691a      	ldr	r2, [r3, #16]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d105      	bne.n	80023c2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	f023 0201 	bic.w	r2, r3, #1
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	611a      	str	r2, [r3, #16]
  }
}
 80023c2:	bf00      	nop
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	40010000 	.word	0x40010000
 80023d4:	40000400 	.word	0x40000400
 80023d8:	40000800 	.word	0x40000800
 80023dc:	40000c00 	.word	0x40000c00
 80023e0:	40010400 	.word	0x40010400
 80023e4:	40014000 	.word	0x40014000
 80023e8:	40014400 	.word	0x40014400
 80023ec:	40014800 	.word	0x40014800
 80023f0:	40001800 	.word	0x40001800
 80023f4:	40001c00 	.word	0x40001c00
 80023f8:	40002000 	.word	0x40002000

080023fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b087      	sub	sp, #28
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	f023 0201 	bic.w	r2, r3, #1
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002426:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	011b      	lsls	r3, r3, #4
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	4313      	orrs	r3, r2
 8002430:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f023 030a 	bic.w	r3, r3, #10
 8002438:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	4313      	orrs	r3, r2
 8002440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	621a      	str	r2, [r3, #32]
}
 800244e:	bf00      	nop
 8002450:	371c      	adds	r7, #28
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800245a:	b480      	push	{r7}
 800245c:	b087      	sub	sp, #28
 800245e:	af00      	add	r7, sp, #0
 8002460:	60f8      	str	r0, [r7, #12]
 8002462:	60b9      	str	r1, [r7, #8]
 8002464:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	f023 0210 	bic.w	r2, r3, #16
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002484:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	031b      	lsls	r3, r3, #12
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002496:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	4313      	orrs	r3, r2
 80024a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	621a      	str	r2, [r3, #32]
}
 80024ae:	bf00      	nop
 80024b0:	371c      	adds	r7, #28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b085      	sub	sp, #20
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f043 0307 	orr.w	r3, r3, #7
 80024dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	609a      	str	r2, [r3, #8]
}
 80024e4:	bf00      	nop
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b087      	sub	sp, #28
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
 80024fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800250a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	021a      	lsls	r2, r3, #8
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	431a      	orrs	r2, r3
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	4313      	orrs	r3, r2
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	4313      	orrs	r3, r2
 800251c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	609a      	str	r2, [r3, #8]
}
 8002524:	bf00      	nop
 8002526:	371c      	adds	r7, #28
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002540:	2b01      	cmp	r3, #1
 8002542:	d101      	bne.n	8002548 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002544:	2302      	movs	r3, #2
 8002546:	e05a      	b.n	80025fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2202      	movs	r2, #2
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800256e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	4313      	orrs	r3, r2
 8002578:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a21      	ldr	r2, [pc, #132]	@ (800260c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d022      	beq.n	80025d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002594:	d01d      	beq.n	80025d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a1d      	ldr	r2, [pc, #116]	@ (8002610 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d018      	beq.n	80025d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002614 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d013      	beq.n	80025d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002618 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d00e      	beq.n	80025d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a18      	ldr	r2, [pc, #96]	@ (800261c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d009      	beq.n	80025d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a17      	ldr	r2, [pc, #92]	@ (8002620 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d004      	beq.n	80025d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a15      	ldr	r2, [pc, #84]	@ (8002624 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d10c      	bne.n	80025ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	40010000 	.word	0x40010000
 8002610:	40000400 	.word	0x40000400
 8002614:	40000800 	.word	0x40000800
 8002618:	40000c00 	.word	0x40000c00
 800261c:	40010400 	.word	0x40010400
 8002620:	40014000 	.word	0x40014000
 8002624:	40001800 	.word	0x40001800

08002628 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e042      	b.n	80026e8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d106      	bne.n	800267c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7fe f9e6 	bl	8000a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2224      	movs	r2, #36	@ 0x24
 8002680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68da      	ldr	r2, [r3, #12]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002692:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 fd11 	bl	80030bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	691a      	ldr	r2, [r3, #16]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80026a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695a      	ldr	r2, [r3, #20]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80026b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80026c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2220      	movs	r2, #32
 80026d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2220      	movs	r2, #32
 80026dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	4613      	mov	r3, r2
 80026fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b20      	cmp	r3, #32
 8002708:	d121      	bne.n	800274e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d002      	beq.n	8002716 <HAL_UART_Transmit_IT+0x26>
 8002710:	88fb      	ldrh	r3, [r7, #6]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e01a      	b.n	8002750 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	88fa      	ldrh	r2, [r7, #6]
 8002724:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	88fa      	ldrh	r2, [r7, #6]
 800272a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2221      	movs	r2, #33	@ 0x21
 8002736:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68da      	ldr	r2, [r3, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002748:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800274a:	2300      	movs	r3, #0
 800274c:	e000      	b.n	8002750 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800274e:	2302      	movs	r3, #2
  }
}
 8002750:	4618      	mov	r0, r3
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	4613      	mov	r3, r2
 8002768:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b20      	cmp	r3, #32
 8002774:	d112      	bne.n	800279c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d002      	beq.n	8002782 <HAL_UART_Receive_IT+0x26>
 800277c:	88fb      	ldrh	r3, [r7, #6]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e00b      	b.n	800279e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800278c:	88fb      	ldrh	r3, [r7, #6]
 800278e:	461a      	mov	r2, r3
 8002790:	68b9      	ldr	r1, [r7, #8]
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 faba 	bl	8002d0c <UART_Start_Receive_IT>
 8002798:	4603      	mov	r3, r0
 800279a:	e000      	b.n	800279e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800279c:	2302      	movs	r3, #2
  }
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
	...

080027a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b0ba      	sub	sp, #232	@ 0xe8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80027da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80027e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10f      	bne.n	800280e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027f2:	f003 0320 	and.w	r3, r3, #32
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d009      	beq.n	800280e <HAL_UART_IRQHandler+0x66>
 80027fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027fe:	f003 0320 	and.w	r3, r3, #32
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 fb99 	bl	8002f3e <UART_Receive_IT>
      return;
 800280c:	e25b      	b.n	8002cc6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800280e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 80de 	beq.w	80029d4 <HAL_UART_IRQHandler+0x22c>
 8002818:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	d106      	bne.n	8002832 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002828:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 80d1 	beq.w	80029d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00b      	beq.n	8002856 <HAL_UART_IRQHandler+0xae>
 800283e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002846:	2b00      	cmp	r3, #0
 8002848:	d005      	beq.n	8002856 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284e:	f043 0201 	orr.w	r2, r3, #1
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800285a:	f003 0304 	and.w	r3, r3, #4
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00b      	beq.n	800287a <HAL_UART_IRQHandler+0xd2>
 8002862:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d005      	beq.n	800287a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002872:	f043 0202 	orr.w	r2, r3, #2
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800287a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00b      	beq.n	800289e <HAL_UART_IRQHandler+0xf6>
 8002886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d005      	beq.n	800289e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002896:	f043 0204 	orr.w	r2, r3, #4
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800289e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d011      	beq.n	80028ce <HAL_UART_IRQHandler+0x126>
 80028aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028ae:	f003 0320 	and.w	r3, r3, #32
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d105      	bne.n	80028c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80028b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d005      	beq.n	80028ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c6:	f043 0208 	orr.w	r2, r3, #8
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 81f2 	beq.w	8002cbc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028dc:	f003 0320 	and.w	r3, r3, #32
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d008      	beq.n	80028f6 <HAL_UART_IRQHandler+0x14e>
 80028e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028e8:	f003 0320 	and.w	r3, r3, #32
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d002      	beq.n	80028f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 fb24 	bl	8002f3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002900:	2b40      	cmp	r3, #64	@ 0x40
 8002902:	bf0c      	ite	eq
 8002904:	2301      	moveq	r3, #1
 8002906:	2300      	movne	r3, #0
 8002908:	b2db      	uxtb	r3, r3
 800290a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b00      	cmp	r3, #0
 8002918:	d103      	bne.n	8002922 <HAL_UART_IRQHandler+0x17a>
 800291a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800291e:	2b00      	cmp	r3, #0
 8002920:	d04f      	beq.n	80029c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 fa2c 	bl	8002d80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002932:	2b40      	cmp	r3, #64	@ 0x40
 8002934:	d141      	bne.n	80029ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	3314      	adds	r3, #20
 800293c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002940:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002944:	e853 3f00 	ldrex	r3, [r3]
 8002948:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800294c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002950:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002954:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	3314      	adds	r3, #20
 800295e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002962:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002966:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800296a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800296e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002972:	e841 2300 	strex	r3, r2, [r1]
 8002976:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800297a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1d9      	bne.n	8002936 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002986:	2b00      	cmp	r3, #0
 8002988:	d013      	beq.n	80029b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800298e:	4a7e      	ldr	r2, [pc, #504]	@ (8002b88 <HAL_UART_IRQHandler+0x3e0>)
 8002990:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002996:	4618      	mov	r0, r3
 8002998:	f7fe fb19 	bl	8000fce <HAL_DMA_Abort_IT>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d016      	beq.n	80029d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80029ac:	4610      	mov	r0, r2
 80029ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029b0:	e00e      	b.n	80029d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f994 	bl	8002ce0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029b8:	e00a      	b.n	80029d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f990 	bl	8002ce0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029c0:	e006      	b.n	80029d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f98c 	bl	8002ce0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80029ce:	e175      	b.n	8002cbc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029d0:	bf00      	nop
    return;
 80029d2:	e173      	b.n	8002cbc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d8:	2b01      	cmp	r3, #1
 80029da:	f040 814f 	bne.w	8002c7c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80029de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029e2:	f003 0310 	and.w	r3, r3, #16
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 8148 	beq.w	8002c7c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80029ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029f0:	f003 0310 	and.w	r3, r3, #16
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 8141 	beq.w	8002c7c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029fa:	2300      	movs	r3, #0
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	60bb      	str	r3, [r7, #8]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	60bb      	str	r3, [r7, #8]
 8002a0e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a1a:	2b40      	cmp	r3, #64	@ 0x40
 8002a1c:	f040 80b6 	bne.w	8002b8c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 8145 	beq.w	8002cc0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002a3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	f080 813e 	bcs.w	8002cc0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a4a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a56:	f000 8088 	beq.w	8002b6a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	330c      	adds	r3, #12
 8002a60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a68:	e853 3f00 	ldrex	r3, [r3]
 8002a6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002a70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	330c      	adds	r3, #12
 8002a82:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002a86:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002a8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002a92:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002a96:	e841 2300 	strex	r3, r2, [r1]
 8002a9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002a9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1d9      	bne.n	8002a5a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	3314      	adds	r3, #20
 8002aac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ab0:	e853 3f00 	ldrex	r3, [r3]
 8002ab4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002ab6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ab8:	f023 0301 	bic.w	r3, r3, #1
 8002abc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	3314      	adds	r3, #20
 8002ac6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002aca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002ace:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002ad2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002ad6:	e841 2300 	strex	r3, r2, [r1]
 8002ada:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002adc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1e1      	bne.n	8002aa6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	3314      	adds	r3, #20
 8002ae8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002aec:	e853 3f00 	ldrex	r3, [r3]
 8002af0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002af2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002af4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002af8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	3314      	adds	r3, #20
 8002b02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002b06:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002b08:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b0a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002b0c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002b0e:	e841 2300 	strex	r3, r2, [r1]
 8002b12:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002b14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1e3      	bne.n	8002ae2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	330c      	adds	r3, #12
 8002b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b32:	e853 3f00 	ldrex	r3, [r3]
 8002b36:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002b38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b3a:	f023 0310 	bic.w	r3, r3, #16
 8002b3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	330c      	adds	r3, #12
 8002b48:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002b4c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002b4e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b50:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b52:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002b54:	e841 2300 	strex	r3, r2, [r1]
 8002b58:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002b5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1e3      	bne.n	8002b28 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fe f9c2 	bl	8000eee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	4619      	mov	r1, r3
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f8b7 	bl	8002cf4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b86:	e09b      	b.n	8002cc0 <HAL_UART_IRQHandler+0x518>
 8002b88:	08002e47 	.word	0x08002e47
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 808e 	beq.w	8002cc4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002ba8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 8089 	beq.w	8002cc4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	330c      	adds	r3, #12
 8002bb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bbc:	e853 3f00 	ldrex	r3, [r3]
 8002bc0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002bc8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	330c      	adds	r3, #12
 8002bd2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002bd6:	647a      	str	r2, [r7, #68]	@ 0x44
 8002bd8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bda:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002bdc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002bde:	e841 2300 	strex	r3, r2, [r1]
 8002be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002be4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1e3      	bne.n	8002bb2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	3314      	adds	r3, #20
 8002bf0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf4:	e853 3f00 	ldrex	r3, [r3]
 8002bf8:	623b      	str	r3, [r7, #32]
   return(result);
 8002bfa:	6a3b      	ldr	r3, [r7, #32]
 8002bfc:	f023 0301 	bic.w	r3, r3, #1
 8002c00:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	3314      	adds	r3, #20
 8002c0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002c0e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c16:	e841 2300 	strex	r3, r2, [r1]
 8002c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1e3      	bne.n	8002bea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2220      	movs	r2, #32
 8002c26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	330c      	adds	r3, #12
 8002c36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	e853 3f00 	ldrex	r3, [r3]
 8002c3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f023 0310 	bic.w	r3, r3, #16
 8002c46:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	330c      	adds	r3, #12
 8002c50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002c54:	61fa      	str	r2, [r7, #28]
 8002c56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c58:	69b9      	ldr	r1, [r7, #24]
 8002c5a:	69fa      	ldr	r2, [r7, #28]
 8002c5c:	e841 2300 	strex	r3, r2, [r1]
 8002c60:	617b      	str	r3, [r7, #20]
   return(result);
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1e3      	bne.n	8002c30 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002c72:	4619      	mov	r1, r3
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 f83d 	bl	8002cf4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c7a:	e023      	b.n	8002cc4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d009      	beq.n	8002c9c <HAL_UART_IRQHandler+0x4f4>
 8002c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 f8ea 	bl	8002e6e <UART_Transmit_IT>
    return;
 8002c9a:	e014      	b.n	8002cc6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00e      	beq.n	8002cc6 <HAL_UART_IRQHandler+0x51e>
 8002ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d008      	beq.n	8002cc6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f92a 	bl	8002f0e <UART_EndTransmit_IT>
    return;
 8002cba:	e004      	b.n	8002cc6 <HAL_UART_IRQHandler+0x51e>
    return;
 8002cbc:	bf00      	nop
 8002cbe:	e002      	b.n	8002cc6 <HAL_UART_IRQHandler+0x51e>
      return;
 8002cc0:	bf00      	nop
 8002cc2:	e000      	b.n	8002cc6 <HAL_UART_IRQHandler+0x51e>
      return;
 8002cc4:	bf00      	nop
  }
}
 8002cc6:	37e8      	adds	r7, #232	@ 0xe8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	4613      	mov	r3, r2
 8002d18:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	88fa      	ldrh	r2, [r7, #6]
 8002d24:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	88fa      	ldrh	r2, [r7, #6]
 8002d2a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2222      	movs	r2, #34	@ 0x22
 8002d36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d007      	beq.n	8002d52 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68da      	ldr	r2, [r3, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d50:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	695a      	ldr	r2, [r3, #20]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f042 0201 	orr.w	r2, r2, #1
 8002d60:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f042 0220 	orr.w	r2, r2, #32
 8002d70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b095      	sub	sp, #84	@ 0x54
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	330c      	adds	r3, #12
 8002d8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d92:	e853 3f00 	ldrex	r3, [r3]
 8002d96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	330c      	adds	r3, #12
 8002da6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002da8:	643a      	str	r2, [r7, #64]	@ 0x40
 8002daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002dae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002db0:	e841 2300 	strex	r3, r2, [r1]
 8002db4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1e5      	bne.n	8002d88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	3314      	adds	r3, #20
 8002dc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	e853 3f00 	ldrex	r3, [r3]
 8002dca:	61fb      	str	r3, [r7, #28]
   return(result);
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f023 0301 	bic.w	r3, r3, #1
 8002dd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	3314      	adds	r3, #20
 8002dda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ddc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002dde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002de2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002de4:	e841 2300 	strex	r3, r2, [r1]
 8002de8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1e5      	bne.n	8002dbc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d119      	bne.n	8002e2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	330c      	adds	r3, #12
 8002dfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	e853 3f00 	ldrex	r3, [r3]
 8002e06:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f023 0310 	bic.w	r3, r3, #16
 8002e0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	330c      	adds	r3, #12
 8002e16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e18:	61ba      	str	r2, [r7, #24]
 8002e1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1c:	6979      	ldr	r1, [r7, #20]
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	e841 2300 	strex	r3, r2, [r1]
 8002e24:	613b      	str	r3, [r7, #16]
   return(result);
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1e5      	bne.n	8002df8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002e3a:	bf00      	nop
 8002e3c:	3754      	adds	r7, #84	@ 0x54
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b084      	sub	sp, #16
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f7ff ff3d 	bl	8002ce0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e66:	bf00      	nop
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b085      	sub	sp, #20
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b21      	cmp	r3, #33	@ 0x21
 8002e80:	d13e      	bne.n	8002f00 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e8a:	d114      	bne.n	8002eb6 <UART_Transmit_IT+0x48>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d110      	bne.n	8002eb6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ea8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	1c9a      	adds	r2, r3, #2
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	621a      	str	r2, [r3, #32]
 8002eb4:	e008      	b.n	8002ec8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	1c59      	adds	r1, r3, #1
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6211      	str	r1, [r2, #32]
 8002ec0:	781a      	ldrb	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10f      	bne.n	8002efc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002eea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002efa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002efc:	2300      	movs	r3, #0
 8002efe:	e000      	b.n	8002f02 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f00:	2302      	movs	r3, #2
  }
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3714      	adds	r7, #20
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68da      	ldr	r2, [r3, #12]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7ff fecc 	bl	8002ccc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b08c      	sub	sp, #48	@ 0x30
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b22      	cmp	r3, #34	@ 0x22
 8002f50:	f040 80ae 	bne.w	80030b0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f5c:	d117      	bne.n	8002f8e <UART_Receive_IT+0x50>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d113      	bne.n	8002f8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002f66:	2300      	movs	r3, #0
 8002f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f86:	1c9a      	adds	r2, r3, #2
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f8c:	e026      	b.n	8002fdc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fa0:	d007      	beq.n	8002fb2 <UART_Receive_IT+0x74>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10a      	bne.n	8002fc0 <UART_Receive_IT+0x82>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d106      	bne.n	8002fc0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fbc:	701a      	strb	r2, [r3, #0]
 8002fbe:	e008      	b.n	8002fd2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fd0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd6:	1c5a      	adds	r2, r3, #1
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	4619      	mov	r1, r3
 8002fea:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d15d      	bne.n	80030ac <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68da      	ldr	r2, [r3, #12]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 0220 	bic.w	r2, r2, #32
 8002ffe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800300e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695a      	ldr	r2, [r3, #20]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0201 	bic.w	r2, r2, #1
 800301e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2220      	movs	r2, #32
 8003024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003032:	2b01      	cmp	r3, #1
 8003034:	d135      	bne.n	80030a2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	330c      	adds	r3, #12
 8003042:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	e853 3f00 	ldrex	r3, [r3]
 800304a:	613b      	str	r3, [r7, #16]
   return(result);
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	f023 0310 	bic.w	r3, r3, #16
 8003052:	627b      	str	r3, [r7, #36]	@ 0x24
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	330c      	adds	r3, #12
 800305a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800305c:	623a      	str	r2, [r7, #32]
 800305e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003060:	69f9      	ldr	r1, [r7, #28]
 8003062:	6a3a      	ldr	r2, [r7, #32]
 8003064:	e841 2300 	strex	r3, r2, [r1]
 8003068:	61bb      	str	r3, [r7, #24]
   return(result);
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1e5      	bne.n	800303c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0310 	and.w	r3, r3, #16
 800307a:	2b10      	cmp	r3, #16
 800307c:	d10a      	bne.n	8003094 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800307e:	2300      	movs	r3, #0
 8003080:	60fb      	str	r3, [r7, #12]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	60fb      	str	r3, [r7, #12]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003098:	4619      	mov	r1, r3
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7ff fe2a 	bl	8002cf4 <HAL_UARTEx_RxEventCallback>
 80030a0:	e002      	b.n	80030a8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7fd fa20 	bl	80004e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80030a8:	2300      	movs	r3, #0
 80030aa:	e002      	b.n	80030b2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80030ac:	2300      	movs	r3, #0
 80030ae:	e000      	b.n	80030b2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80030b0:	2302      	movs	r3, #2
  }
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3730      	adds	r7, #48	@ 0x30
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
	...

080030bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030c0:	b0c0      	sub	sp, #256	@ 0x100
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80030d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030d8:	68d9      	ldr	r1, [r3, #12]
 80030da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	ea40 0301 	orr.w	r3, r0, r1
 80030e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	431a      	orrs	r2, r3
 80030f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	431a      	orrs	r2, r3
 80030fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	4313      	orrs	r3, r2
 8003104:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003114:	f021 010c 	bic.w	r1, r1, #12
 8003118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003122:	430b      	orrs	r3, r1
 8003124:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003136:	6999      	ldr	r1, [r3, #24]
 8003138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	ea40 0301 	orr.w	r3, r0, r1
 8003142:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	4b8f      	ldr	r3, [pc, #572]	@ (8003388 <UART_SetConfig+0x2cc>)
 800314c:	429a      	cmp	r2, r3
 800314e:	d005      	beq.n	800315c <UART_SetConfig+0xa0>
 8003150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	4b8d      	ldr	r3, [pc, #564]	@ (800338c <UART_SetConfig+0x2d0>)
 8003158:	429a      	cmp	r2, r3
 800315a:	d104      	bne.n	8003166 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800315c:	f7fe fd6e 	bl	8001c3c <HAL_RCC_GetPCLK2Freq>
 8003160:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003164:	e003      	b.n	800316e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003166:	f7fe fd55 	bl	8001c14 <HAL_RCC_GetPCLK1Freq>
 800316a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800316e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003172:	69db      	ldr	r3, [r3, #28]
 8003174:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003178:	f040 810c 	bne.w	8003394 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800317c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003180:	2200      	movs	r2, #0
 8003182:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003186:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800318a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800318e:	4622      	mov	r2, r4
 8003190:	462b      	mov	r3, r5
 8003192:	1891      	adds	r1, r2, r2
 8003194:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003196:	415b      	adcs	r3, r3
 8003198:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800319a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800319e:	4621      	mov	r1, r4
 80031a0:	eb12 0801 	adds.w	r8, r2, r1
 80031a4:	4629      	mov	r1, r5
 80031a6:	eb43 0901 	adc.w	r9, r3, r1
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	f04f 0300 	mov.w	r3, #0
 80031b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031be:	4690      	mov	r8, r2
 80031c0:	4699      	mov	r9, r3
 80031c2:	4623      	mov	r3, r4
 80031c4:	eb18 0303 	adds.w	r3, r8, r3
 80031c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80031cc:	462b      	mov	r3, r5
 80031ce:	eb49 0303 	adc.w	r3, r9, r3
 80031d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80031d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80031e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80031e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80031ea:	460b      	mov	r3, r1
 80031ec:	18db      	adds	r3, r3, r3
 80031ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80031f0:	4613      	mov	r3, r2
 80031f2:	eb42 0303 	adc.w	r3, r2, r3
 80031f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80031f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80031fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003200:	f7fc ffe2 	bl	80001c8 <__aeabi_uldivmod>
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	4b61      	ldr	r3, [pc, #388]	@ (8003390 <UART_SetConfig+0x2d4>)
 800320a:	fba3 2302 	umull	r2, r3, r3, r2
 800320e:	095b      	lsrs	r3, r3, #5
 8003210:	011c      	lsls	r4, r3, #4
 8003212:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003216:	2200      	movs	r2, #0
 8003218:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800321c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003220:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003224:	4642      	mov	r2, r8
 8003226:	464b      	mov	r3, r9
 8003228:	1891      	adds	r1, r2, r2
 800322a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800322c:	415b      	adcs	r3, r3
 800322e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003230:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003234:	4641      	mov	r1, r8
 8003236:	eb12 0a01 	adds.w	sl, r2, r1
 800323a:	4649      	mov	r1, r9
 800323c:	eb43 0b01 	adc.w	fp, r3, r1
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800324c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003250:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003254:	4692      	mov	sl, r2
 8003256:	469b      	mov	fp, r3
 8003258:	4643      	mov	r3, r8
 800325a:	eb1a 0303 	adds.w	r3, sl, r3
 800325e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003262:	464b      	mov	r3, r9
 8003264:	eb4b 0303 	adc.w	r3, fp, r3
 8003268:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800326c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003278:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800327c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003280:	460b      	mov	r3, r1
 8003282:	18db      	adds	r3, r3, r3
 8003284:	643b      	str	r3, [r7, #64]	@ 0x40
 8003286:	4613      	mov	r3, r2
 8003288:	eb42 0303 	adc.w	r3, r2, r3
 800328c:	647b      	str	r3, [r7, #68]	@ 0x44
 800328e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003292:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003296:	f7fc ff97 	bl	80001c8 <__aeabi_uldivmod>
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	4611      	mov	r1, r2
 80032a0:	4b3b      	ldr	r3, [pc, #236]	@ (8003390 <UART_SetConfig+0x2d4>)
 80032a2:	fba3 2301 	umull	r2, r3, r3, r1
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	2264      	movs	r2, #100	@ 0x64
 80032aa:	fb02 f303 	mul.w	r3, r2, r3
 80032ae:	1acb      	subs	r3, r1, r3
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80032b6:	4b36      	ldr	r3, [pc, #216]	@ (8003390 <UART_SetConfig+0x2d4>)
 80032b8:	fba3 2302 	umull	r2, r3, r3, r2
 80032bc:	095b      	lsrs	r3, r3, #5
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80032c4:	441c      	add	r4, r3
 80032c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032ca:	2200      	movs	r2, #0
 80032cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80032d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80032d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80032d8:	4642      	mov	r2, r8
 80032da:	464b      	mov	r3, r9
 80032dc:	1891      	adds	r1, r2, r2
 80032de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80032e0:	415b      	adcs	r3, r3
 80032e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80032e8:	4641      	mov	r1, r8
 80032ea:	1851      	adds	r1, r2, r1
 80032ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80032ee:	4649      	mov	r1, r9
 80032f0:	414b      	adcs	r3, r1
 80032f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003300:	4659      	mov	r1, fp
 8003302:	00cb      	lsls	r3, r1, #3
 8003304:	4651      	mov	r1, sl
 8003306:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800330a:	4651      	mov	r1, sl
 800330c:	00ca      	lsls	r2, r1, #3
 800330e:	4610      	mov	r0, r2
 8003310:	4619      	mov	r1, r3
 8003312:	4603      	mov	r3, r0
 8003314:	4642      	mov	r2, r8
 8003316:	189b      	adds	r3, r3, r2
 8003318:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800331c:	464b      	mov	r3, r9
 800331e:	460a      	mov	r2, r1
 8003320:	eb42 0303 	adc.w	r3, r2, r3
 8003324:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003334:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003338:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800333c:	460b      	mov	r3, r1
 800333e:	18db      	adds	r3, r3, r3
 8003340:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003342:	4613      	mov	r3, r2
 8003344:	eb42 0303 	adc.w	r3, r2, r3
 8003348:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800334a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800334e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003352:	f7fc ff39 	bl	80001c8 <__aeabi_uldivmod>
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	4b0d      	ldr	r3, [pc, #52]	@ (8003390 <UART_SetConfig+0x2d4>)
 800335c:	fba3 1302 	umull	r1, r3, r3, r2
 8003360:	095b      	lsrs	r3, r3, #5
 8003362:	2164      	movs	r1, #100	@ 0x64
 8003364:	fb01 f303 	mul.w	r3, r1, r3
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	3332      	adds	r3, #50	@ 0x32
 800336e:	4a08      	ldr	r2, [pc, #32]	@ (8003390 <UART_SetConfig+0x2d4>)
 8003370:	fba2 2303 	umull	r2, r3, r2, r3
 8003374:	095b      	lsrs	r3, r3, #5
 8003376:	f003 0207 	and.w	r2, r3, #7
 800337a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4422      	add	r2, r4
 8003382:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003384:	e106      	b.n	8003594 <UART_SetConfig+0x4d8>
 8003386:	bf00      	nop
 8003388:	40011000 	.word	0x40011000
 800338c:	40011400 	.word	0x40011400
 8003390:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003394:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003398:	2200      	movs	r2, #0
 800339a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800339e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80033a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80033a6:	4642      	mov	r2, r8
 80033a8:	464b      	mov	r3, r9
 80033aa:	1891      	adds	r1, r2, r2
 80033ac:	6239      	str	r1, [r7, #32]
 80033ae:	415b      	adcs	r3, r3
 80033b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80033b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033b6:	4641      	mov	r1, r8
 80033b8:	1854      	adds	r4, r2, r1
 80033ba:	4649      	mov	r1, r9
 80033bc:	eb43 0501 	adc.w	r5, r3, r1
 80033c0:	f04f 0200 	mov.w	r2, #0
 80033c4:	f04f 0300 	mov.w	r3, #0
 80033c8:	00eb      	lsls	r3, r5, #3
 80033ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033ce:	00e2      	lsls	r2, r4, #3
 80033d0:	4614      	mov	r4, r2
 80033d2:	461d      	mov	r5, r3
 80033d4:	4643      	mov	r3, r8
 80033d6:	18e3      	adds	r3, r4, r3
 80033d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80033dc:	464b      	mov	r3, r9
 80033de:	eb45 0303 	adc.w	r3, r5, r3
 80033e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80033e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80033f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	f04f 0300 	mov.w	r3, #0
 80033fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003402:	4629      	mov	r1, r5
 8003404:	008b      	lsls	r3, r1, #2
 8003406:	4621      	mov	r1, r4
 8003408:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800340c:	4621      	mov	r1, r4
 800340e:	008a      	lsls	r2, r1, #2
 8003410:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003414:	f7fc fed8 	bl	80001c8 <__aeabi_uldivmod>
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	4b60      	ldr	r3, [pc, #384]	@ (80035a0 <UART_SetConfig+0x4e4>)
 800341e:	fba3 2302 	umull	r2, r3, r3, r2
 8003422:	095b      	lsrs	r3, r3, #5
 8003424:	011c      	lsls	r4, r3, #4
 8003426:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800342a:	2200      	movs	r2, #0
 800342c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003430:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003434:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003438:	4642      	mov	r2, r8
 800343a:	464b      	mov	r3, r9
 800343c:	1891      	adds	r1, r2, r2
 800343e:	61b9      	str	r1, [r7, #24]
 8003440:	415b      	adcs	r3, r3
 8003442:	61fb      	str	r3, [r7, #28]
 8003444:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003448:	4641      	mov	r1, r8
 800344a:	1851      	adds	r1, r2, r1
 800344c:	6139      	str	r1, [r7, #16]
 800344e:	4649      	mov	r1, r9
 8003450:	414b      	adcs	r3, r1
 8003452:	617b      	str	r3, [r7, #20]
 8003454:	f04f 0200 	mov.w	r2, #0
 8003458:	f04f 0300 	mov.w	r3, #0
 800345c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003460:	4659      	mov	r1, fp
 8003462:	00cb      	lsls	r3, r1, #3
 8003464:	4651      	mov	r1, sl
 8003466:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800346a:	4651      	mov	r1, sl
 800346c:	00ca      	lsls	r2, r1, #3
 800346e:	4610      	mov	r0, r2
 8003470:	4619      	mov	r1, r3
 8003472:	4603      	mov	r3, r0
 8003474:	4642      	mov	r2, r8
 8003476:	189b      	adds	r3, r3, r2
 8003478:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800347c:	464b      	mov	r3, r9
 800347e:	460a      	mov	r2, r1
 8003480:	eb42 0303 	adc.w	r3, r2, r3
 8003484:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003492:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003494:	f04f 0200 	mov.w	r2, #0
 8003498:	f04f 0300 	mov.w	r3, #0
 800349c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80034a0:	4649      	mov	r1, r9
 80034a2:	008b      	lsls	r3, r1, #2
 80034a4:	4641      	mov	r1, r8
 80034a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034aa:	4641      	mov	r1, r8
 80034ac:	008a      	lsls	r2, r1, #2
 80034ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80034b2:	f7fc fe89 	bl	80001c8 <__aeabi_uldivmod>
 80034b6:	4602      	mov	r2, r0
 80034b8:	460b      	mov	r3, r1
 80034ba:	4611      	mov	r1, r2
 80034bc:	4b38      	ldr	r3, [pc, #224]	@ (80035a0 <UART_SetConfig+0x4e4>)
 80034be:	fba3 2301 	umull	r2, r3, r3, r1
 80034c2:	095b      	lsrs	r3, r3, #5
 80034c4:	2264      	movs	r2, #100	@ 0x64
 80034c6:	fb02 f303 	mul.w	r3, r2, r3
 80034ca:	1acb      	subs	r3, r1, r3
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	3332      	adds	r3, #50	@ 0x32
 80034d0:	4a33      	ldr	r2, [pc, #204]	@ (80035a0 <UART_SetConfig+0x4e4>)
 80034d2:	fba2 2303 	umull	r2, r3, r2, r3
 80034d6:	095b      	lsrs	r3, r3, #5
 80034d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034dc:	441c      	add	r4, r3
 80034de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034e2:	2200      	movs	r2, #0
 80034e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80034e6:	677a      	str	r2, [r7, #116]	@ 0x74
 80034e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80034ec:	4642      	mov	r2, r8
 80034ee:	464b      	mov	r3, r9
 80034f0:	1891      	adds	r1, r2, r2
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	415b      	adcs	r3, r3
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034fc:	4641      	mov	r1, r8
 80034fe:	1851      	adds	r1, r2, r1
 8003500:	6039      	str	r1, [r7, #0]
 8003502:	4649      	mov	r1, r9
 8003504:	414b      	adcs	r3, r1
 8003506:	607b      	str	r3, [r7, #4]
 8003508:	f04f 0200 	mov.w	r2, #0
 800350c:	f04f 0300 	mov.w	r3, #0
 8003510:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003514:	4659      	mov	r1, fp
 8003516:	00cb      	lsls	r3, r1, #3
 8003518:	4651      	mov	r1, sl
 800351a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800351e:	4651      	mov	r1, sl
 8003520:	00ca      	lsls	r2, r1, #3
 8003522:	4610      	mov	r0, r2
 8003524:	4619      	mov	r1, r3
 8003526:	4603      	mov	r3, r0
 8003528:	4642      	mov	r2, r8
 800352a:	189b      	adds	r3, r3, r2
 800352c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800352e:	464b      	mov	r3, r9
 8003530:	460a      	mov	r2, r1
 8003532:	eb42 0303 	adc.w	r3, r2, r3
 8003536:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	663b      	str	r3, [r7, #96]	@ 0x60
 8003542:	667a      	str	r2, [r7, #100]	@ 0x64
 8003544:	f04f 0200 	mov.w	r2, #0
 8003548:	f04f 0300 	mov.w	r3, #0
 800354c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003550:	4649      	mov	r1, r9
 8003552:	008b      	lsls	r3, r1, #2
 8003554:	4641      	mov	r1, r8
 8003556:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800355a:	4641      	mov	r1, r8
 800355c:	008a      	lsls	r2, r1, #2
 800355e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003562:	f7fc fe31 	bl	80001c8 <__aeabi_uldivmod>
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	4b0d      	ldr	r3, [pc, #52]	@ (80035a0 <UART_SetConfig+0x4e4>)
 800356c:	fba3 1302 	umull	r1, r3, r3, r2
 8003570:	095b      	lsrs	r3, r3, #5
 8003572:	2164      	movs	r1, #100	@ 0x64
 8003574:	fb01 f303 	mul.w	r3, r1, r3
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	3332      	adds	r3, #50	@ 0x32
 800357e:	4a08      	ldr	r2, [pc, #32]	@ (80035a0 <UART_SetConfig+0x4e4>)
 8003580:	fba2 2303 	umull	r2, r3, r2, r3
 8003584:	095b      	lsrs	r3, r3, #5
 8003586:	f003 020f 	and.w	r2, r3, #15
 800358a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4422      	add	r2, r4
 8003592:	609a      	str	r2, [r3, #8]
}
 8003594:	bf00      	nop
 8003596:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800359a:	46bd      	mov	sp, r7
 800359c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035a0:	51eb851f 	.word	0x51eb851f

080035a4 <memset>:
 80035a4:	4402      	add	r2, r0
 80035a6:	4603      	mov	r3, r0
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d100      	bne.n	80035ae <memset+0xa>
 80035ac:	4770      	bx	lr
 80035ae:	f803 1b01 	strb.w	r1, [r3], #1
 80035b2:	e7f9      	b.n	80035a8 <memset+0x4>

080035b4 <__libc_init_array>:
 80035b4:	b570      	push	{r4, r5, r6, lr}
 80035b6:	4d0d      	ldr	r5, [pc, #52]	@ (80035ec <__libc_init_array+0x38>)
 80035b8:	4c0d      	ldr	r4, [pc, #52]	@ (80035f0 <__libc_init_array+0x3c>)
 80035ba:	1b64      	subs	r4, r4, r5
 80035bc:	10a4      	asrs	r4, r4, #2
 80035be:	2600      	movs	r6, #0
 80035c0:	42a6      	cmp	r6, r4
 80035c2:	d109      	bne.n	80035d8 <__libc_init_array+0x24>
 80035c4:	4d0b      	ldr	r5, [pc, #44]	@ (80035f4 <__libc_init_array+0x40>)
 80035c6:	4c0c      	ldr	r4, [pc, #48]	@ (80035f8 <__libc_init_array+0x44>)
 80035c8:	f000 f818 	bl	80035fc <_init>
 80035cc:	1b64      	subs	r4, r4, r5
 80035ce:	10a4      	asrs	r4, r4, #2
 80035d0:	2600      	movs	r6, #0
 80035d2:	42a6      	cmp	r6, r4
 80035d4:	d105      	bne.n	80035e2 <__libc_init_array+0x2e>
 80035d6:	bd70      	pop	{r4, r5, r6, pc}
 80035d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80035dc:	4798      	blx	r3
 80035de:	3601      	adds	r6, #1
 80035e0:	e7ee      	b.n	80035c0 <__libc_init_array+0xc>
 80035e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80035e6:	4798      	blx	r3
 80035e8:	3601      	adds	r6, #1
 80035ea:	e7f2      	b.n	80035d2 <__libc_init_array+0x1e>
 80035ec:	08003634 	.word	0x08003634
 80035f0:	08003634 	.word	0x08003634
 80035f4:	08003634 	.word	0x08003634
 80035f8:	08003638 	.word	0x08003638

080035fc <_init>:
 80035fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035fe:	bf00      	nop
 8003600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003602:	bc08      	pop	{r3}
 8003604:	469e      	mov	lr, r3
 8003606:	4770      	bx	lr

08003608 <_fini>:
 8003608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800360a:	bf00      	nop
 800360c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800360e:	bc08      	pop	{r3}
 8003610:	469e      	mov	lr, r3
 8003612:	4770      	bx	lr
